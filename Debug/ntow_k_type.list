
ntow_k_type.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc8  08003dc8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003dc8  08003dc8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dc8  08003dc8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000014  08003de4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08003de4  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009446  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017d2  00000000  00000000  00029482  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d8  00000000  00000000  0002ac58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  0002b430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d016  00000000  00000000  0002bb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007855  00000000  00000000  00038b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00047739  00000000  00000000  000403ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00087ae4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c64  00000000  00000000  00087b60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d30 	.word	0x08003d30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003d30 	.word	0x08003d30

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fe75 	bl	8000f18 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fdcb 	bl	8000dd0 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fa7c 	bl	8000740 <__aeabi_dsub>
 8000248:	f000 fdc2 	bl	8000dd0 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dmul>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	46de      	mov	lr, fp
 8000262:	464e      	mov	r6, r9
 8000264:	4645      	mov	r5, r8
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	4683      	mov	fp, r0
 800026a:	0006      	movs	r6, r0
 800026c:	030f      	lsls	r7, r1, #12
 800026e:	0048      	lsls	r0, r1, #1
 8000270:	b087      	sub	sp, #28
 8000272:	4692      	mov	sl, r2
 8000274:	001d      	movs	r5, r3
 8000276:	0b3f      	lsrs	r7, r7, #12
 8000278:	0d40      	lsrs	r0, r0, #21
 800027a:	0fcc      	lsrs	r4, r1, #31
 800027c:	2800      	cmp	r0, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_dmul+0x26>
 8000280:	e06f      	b.n	8000362 <__aeabi_dmul+0x106>
 8000282:	4bde      	ldr	r3, [pc, #888]	; (80005fc <__aeabi_dmul+0x3a0>)
 8000284:	4298      	cmp	r0, r3
 8000286:	d038      	beq.n	80002fa <__aeabi_dmul+0x9e>
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	00ff      	lsls	r7, r7, #3
 800028c:	041b      	lsls	r3, r3, #16
 800028e:	431f      	orrs	r7, r3
 8000290:	0f73      	lsrs	r3, r6, #29
 8000292:	433b      	orrs	r3, r7
 8000294:	9301      	str	r3, [sp, #4]
 8000296:	4bda      	ldr	r3, [pc, #872]	; (8000600 <__aeabi_dmul+0x3a4>)
 8000298:	2700      	movs	r7, #0
 800029a:	4699      	mov	r9, r3
 800029c:	2300      	movs	r3, #0
 800029e:	469b      	mov	fp, r3
 80002a0:	00f6      	lsls	r6, r6, #3
 80002a2:	4481      	add	r9, r0
 80002a4:	032b      	lsls	r3, r5, #12
 80002a6:	0069      	lsls	r1, r5, #1
 80002a8:	0b1b      	lsrs	r3, r3, #12
 80002aa:	4652      	mov	r2, sl
 80002ac:	4698      	mov	r8, r3
 80002ae:	0d49      	lsrs	r1, r1, #21
 80002b0:	0fed      	lsrs	r5, r5, #31
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_dmul+0x5c>
 80002b6:	e085      	b.n	80003c4 <__aeabi_dmul+0x168>
 80002b8:	4bd0      	ldr	r3, [pc, #832]	; (80005fc <__aeabi_dmul+0x3a0>)
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d100      	bne.n	80002c0 <__aeabi_dmul+0x64>
 80002be:	e073      	b.n	80003a8 <__aeabi_dmul+0x14c>
 80002c0:	4643      	mov	r3, r8
 80002c2:	00da      	lsls	r2, r3, #3
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	041b      	lsls	r3, r3, #16
 80002c8:	4313      	orrs	r3, r2
 80002ca:	4652      	mov	r2, sl
 80002cc:	48cc      	ldr	r0, [pc, #816]	; (8000600 <__aeabi_dmul+0x3a4>)
 80002ce:	0f52      	lsrs	r2, r2, #29
 80002d0:	4684      	mov	ip, r0
 80002d2:	4313      	orrs	r3, r2
 80002d4:	4652      	mov	r2, sl
 80002d6:	2000      	movs	r0, #0
 80002d8:	4461      	add	r1, ip
 80002da:	00d2      	lsls	r2, r2, #3
 80002dc:	4489      	add	r9, r1
 80002de:	0021      	movs	r1, r4
 80002e0:	4069      	eors	r1, r5
 80002e2:	9100      	str	r1, [sp, #0]
 80002e4:	468c      	mov	ip, r1
 80002e6:	2101      	movs	r1, #1
 80002e8:	4449      	add	r1, r9
 80002ea:	468a      	mov	sl, r1
 80002ec:	2f0f      	cmp	r7, #15
 80002ee:	d900      	bls.n	80002f2 <__aeabi_dmul+0x96>
 80002f0:	e090      	b.n	8000414 <__aeabi_dmul+0x1b8>
 80002f2:	49c4      	ldr	r1, [pc, #784]	; (8000604 <__aeabi_dmul+0x3a8>)
 80002f4:	00bf      	lsls	r7, r7, #2
 80002f6:	59cf      	ldr	r7, [r1, r7]
 80002f8:	46bf      	mov	pc, r7
 80002fa:	465b      	mov	r3, fp
 80002fc:	433b      	orrs	r3, r7
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	d000      	beq.n	8000304 <__aeabi_dmul+0xa8>
 8000302:	e16a      	b.n	80005da <__aeabi_dmul+0x37e>
 8000304:	2302      	movs	r3, #2
 8000306:	2708      	movs	r7, #8
 8000308:	2600      	movs	r6, #0
 800030a:	4681      	mov	r9, r0
 800030c:	469b      	mov	fp, r3
 800030e:	e7c9      	b.n	80002a4 <__aeabi_dmul+0x48>
 8000310:	0032      	movs	r2, r6
 8000312:	4658      	mov	r0, fp
 8000314:	9b01      	ldr	r3, [sp, #4]
 8000316:	4661      	mov	r1, ip
 8000318:	9100      	str	r1, [sp, #0]
 800031a:	2802      	cmp	r0, #2
 800031c:	d100      	bne.n	8000320 <__aeabi_dmul+0xc4>
 800031e:	e075      	b.n	800040c <__aeabi_dmul+0x1b0>
 8000320:	2803      	cmp	r0, #3
 8000322:	d100      	bne.n	8000326 <__aeabi_dmul+0xca>
 8000324:	e1fe      	b.n	8000724 <__aeabi_dmul+0x4c8>
 8000326:	2801      	cmp	r0, #1
 8000328:	d000      	beq.n	800032c <__aeabi_dmul+0xd0>
 800032a:	e12c      	b.n	8000586 <__aeabi_dmul+0x32a>
 800032c:	2300      	movs	r3, #0
 800032e:	2700      	movs	r7, #0
 8000330:	2600      	movs	r6, #0
 8000332:	2500      	movs	r5, #0
 8000334:	033f      	lsls	r7, r7, #12
 8000336:	0d2a      	lsrs	r2, r5, #20
 8000338:	0b3f      	lsrs	r7, r7, #12
 800033a:	48b3      	ldr	r0, [pc, #716]	; (8000608 <__aeabi_dmul+0x3ac>)
 800033c:	0512      	lsls	r2, r2, #20
 800033e:	433a      	orrs	r2, r7
 8000340:	4002      	ands	r2, r0
 8000342:	051b      	lsls	r3, r3, #20
 8000344:	4313      	orrs	r3, r2
 8000346:	9a00      	ldr	r2, [sp, #0]
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	07d1      	lsls	r1, r2, #31
 800034c:	085b      	lsrs	r3, r3, #1
 800034e:	430b      	orrs	r3, r1
 8000350:	0030      	movs	r0, r6
 8000352:	0019      	movs	r1, r3
 8000354:	b007      	add	sp, #28
 8000356:	bc3c      	pop	{r2, r3, r4, r5}
 8000358:	4690      	mov	r8, r2
 800035a:	4699      	mov	r9, r3
 800035c:	46a2      	mov	sl, r4
 800035e:	46ab      	mov	fp, r5
 8000360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000362:	465b      	mov	r3, fp
 8000364:	433b      	orrs	r3, r7
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	d100      	bne.n	800036c <__aeabi_dmul+0x110>
 800036a:	e12f      	b.n	80005cc <__aeabi_dmul+0x370>
 800036c:	2f00      	cmp	r7, #0
 800036e:	d100      	bne.n	8000372 <__aeabi_dmul+0x116>
 8000370:	e1a5      	b.n	80006be <__aeabi_dmul+0x462>
 8000372:	0038      	movs	r0, r7
 8000374:	f000 fdda 	bl	8000f2c <__clzsi2>
 8000378:	0003      	movs	r3, r0
 800037a:	3b0b      	subs	r3, #11
 800037c:	2b1c      	cmp	r3, #28
 800037e:	dd00      	ble.n	8000382 <__aeabi_dmul+0x126>
 8000380:	e196      	b.n	80006b0 <__aeabi_dmul+0x454>
 8000382:	221d      	movs	r2, #29
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	465a      	mov	r2, fp
 8000388:	0001      	movs	r1, r0
 800038a:	40da      	lsrs	r2, r3
 800038c:	465e      	mov	r6, fp
 800038e:	3908      	subs	r1, #8
 8000390:	408f      	lsls	r7, r1
 8000392:	0013      	movs	r3, r2
 8000394:	408e      	lsls	r6, r1
 8000396:	433b      	orrs	r3, r7
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4b9c      	ldr	r3, [pc, #624]	; (800060c <__aeabi_dmul+0x3b0>)
 800039c:	2700      	movs	r7, #0
 800039e:	1a1b      	subs	r3, r3, r0
 80003a0:	4699      	mov	r9, r3
 80003a2:	2300      	movs	r3, #0
 80003a4:	469b      	mov	fp, r3
 80003a6:	e77d      	b.n	80002a4 <__aeabi_dmul+0x48>
 80003a8:	4641      	mov	r1, r8
 80003aa:	4653      	mov	r3, sl
 80003ac:	430b      	orrs	r3, r1
 80003ae:	4993      	ldr	r1, [pc, #588]	; (80005fc <__aeabi_dmul+0x3a0>)
 80003b0:	468c      	mov	ip, r1
 80003b2:	44e1      	add	r9, ip
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d000      	beq.n	80003ba <__aeabi_dmul+0x15e>
 80003b8:	e11a      	b.n	80005f0 <__aeabi_dmul+0x394>
 80003ba:	2202      	movs	r2, #2
 80003bc:	2002      	movs	r0, #2
 80003be:	4317      	orrs	r7, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e78c      	b.n	80002de <__aeabi_dmul+0x82>
 80003c4:	4313      	orrs	r3, r2
 80003c6:	d100      	bne.n	80003ca <__aeabi_dmul+0x16e>
 80003c8:	e10d      	b.n	80005e6 <__aeabi_dmul+0x38a>
 80003ca:	4643      	mov	r3, r8
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d100      	bne.n	80003d2 <__aeabi_dmul+0x176>
 80003d0:	e181      	b.n	80006d6 <__aeabi_dmul+0x47a>
 80003d2:	4640      	mov	r0, r8
 80003d4:	f000 fdaa 	bl	8000f2c <__clzsi2>
 80003d8:	0002      	movs	r2, r0
 80003da:	3a0b      	subs	r2, #11
 80003dc:	2a1c      	cmp	r2, #28
 80003de:	dd00      	ble.n	80003e2 <__aeabi_dmul+0x186>
 80003e0:	e172      	b.n	80006c8 <__aeabi_dmul+0x46c>
 80003e2:	0001      	movs	r1, r0
 80003e4:	4643      	mov	r3, r8
 80003e6:	3908      	subs	r1, #8
 80003e8:	408b      	lsls	r3, r1
 80003ea:	4698      	mov	r8, r3
 80003ec:	231d      	movs	r3, #29
 80003ee:	1a9a      	subs	r2, r3, r2
 80003f0:	4653      	mov	r3, sl
 80003f2:	40d3      	lsrs	r3, r2
 80003f4:	001a      	movs	r2, r3
 80003f6:	4643      	mov	r3, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	4652      	mov	r2, sl
 80003fc:	408a      	lsls	r2, r1
 80003fe:	4649      	mov	r1, r9
 8000400:	1a08      	subs	r0, r1, r0
 8000402:	4982      	ldr	r1, [pc, #520]	; (800060c <__aeabi_dmul+0x3b0>)
 8000404:	4689      	mov	r9, r1
 8000406:	4481      	add	r9, r0
 8000408:	2000      	movs	r0, #0
 800040a:	e768      	b.n	80002de <__aeabi_dmul+0x82>
 800040c:	4b7b      	ldr	r3, [pc, #492]	; (80005fc <__aeabi_dmul+0x3a0>)
 800040e:	2700      	movs	r7, #0
 8000410:	2600      	movs	r6, #0
 8000412:	e78e      	b.n	8000332 <__aeabi_dmul+0xd6>
 8000414:	0c14      	lsrs	r4, r2, #16
 8000416:	0412      	lsls	r2, r2, #16
 8000418:	0c12      	lsrs	r2, r2, #16
 800041a:	0011      	movs	r1, r2
 800041c:	0c37      	lsrs	r7, r6, #16
 800041e:	0436      	lsls	r6, r6, #16
 8000420:	0c35      	lsrs	r5, r6, #16
 8000422:	4379      	muls	r1, r7
 8000424:	0028      	movs	r0, r5
 8000426:	468c      	mov	ip, r1
 8000428:	002e      	movs	r6, r5
 800042a:	4360      	muls	r0, r4
 800042c:	4460      	add	r0, ip
 800042e:	4683      	mov	fp, r0
 8000430:	4356      	muls	r6, r2
 8000432:	0021      	movs	r1, r4
 8000434:	0c30      	lsrs	r0, r6, #16
 8000436:	4680      	mov	r8, r0
 8000438:	4658      	mov	r0, fp
 800043a:	4379      	muls	r1, r7
 800043c:	4440      	add	r0, r8
 800043e:	9102      	str	r1, [sp, #8]
 8000440:	4584      	cmp	ip, r0
 8000442:	d906      	bls.n	8000452 <__aeabi_dmul+0x1f6>
 8000444:	4688      	mov	r8, r1
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	0249      	lsls	r1, r1, #9
 800044a:	468c      	mov	ip, r1
 800044c:	44e0      	add	r8, ip
 800044e:	4641      	mov	r1, r8
 8000450:	9102      	str	r1, [sp, #8]
 8000452:	0436      	lsls	r6, r6, #16
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	0c36      	lsrs	r6, r6, #16
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	468b      	mov	fp, r1
 800045c:	1981      	adds	r1, r0, r6
 800045e:	0c1e      	lsrs	r6, r3, #16
 8000460:	041b      	lsls	r3, r3, #16
 8000462:	0c1b      	lsrs	r3, r3, #16
 8000464:	9103      	str	r1, [sp, #12]
 8000466:	0019      	movs	r1, r3
 8000468:	4379      	muls	r1, r7
 800046a:	468c      	mov	ip, r1
 800046c:	0028      	movs	r0, r5
 800046e:	4375      	muls	r5, r6
 8000470:	4465      	add	r5, ip
 8000472:	46a8      	mov	r8, r5
 8000474:	4358      	muls	r0, r3
 8000476:	0c05      	lsrs	r5, r0, #16
 8000478:	4445      	add	r5, r8
 800047a:	4377      	muls	r7, r6
 800047c:	42a9      	cmp	r1, r5
 800047e:	d903      	bls.n	8000488 <__aeabi_dmul+0x22c>
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0249      	lsls	r1, r1, #9
 8000484:	468c      	mov	ip, r1
 8000486:	4467      	add	r7, ip
 8000488:	0c29      	lsrs	r1, r5, #16
 800048a:	468c      	mov	ip, r1
 800048c:	0039      	movs	r1, r7
 800048e:	0400      	lsls	r0, r0, #16
 8000490:	0c00      	lsrs	r0, r0, #16
 8000492:	042d      	lsls	r5, r5, #16
 8000494:	182d      	adds	r5, r5, r0
 8000496:	4461      	add	r1, ip
 8000498:	44ab      	add	fp, r5
 800049a:	9105      	str	r1, [sp, #20]
 800049c:	4659      	mov	r1, fp
 800049e:	9104      	str	r1, [sp, #16]
 80004a0:	9901      	ldr	r1, [sp, #4]
 80004a2:	040f      	lsls	r7, r1, #16
 80004a4:	0c3f      	lsrs	r7, r7, #16
 80004a6:	0c08      	lsrs	r0, r1, #16
 80004a8:	0039      	movs	r1, r7
 80004aa:	4351      	muls	r1, r2
 80004ac:	4342      	muls	r2, r0
 80004ae:	4690      	mov	r8, r2
 80004b0:	0002      	movs	r2, r0
 80004b2:	468c      	mov	ip, r1
 80004b4:	0c09      	lsrs	r1, r1, #16
 80004b6:	468b      	mov	fp, r1
 80004b8:	4362      	muls	r2, r4
 80004ba:	437c      	muls	r4, r7
 80004bc:	4444      	add	r4, r8
 80004be:	445c      	add	r4, fp
 80004c0:	45a0      	cmp	r8, r4
 80004c2:	d903      	bls.n	80004cc <__aeabi_dmul+0x270>
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0249      	lsls	r1, r1, #9
 80004c8:	4688      	mov	r8, r1
 80004ca:	4442      	add	r2, r8
 80004cc:	0c21      	lsrs	r1, r4, #16
 80004ce:	4688      	mov	r8, r1
 80004d0:	4661      	mov	r1, ip
 80004d2:	0409      	lsls	r1, r1, #16
 80004d4:	0c09      	lsrs	r1, r1, #16
 80004d6:	468c      	mov	ip, r1
 80004d8:	0039      	movs	r1, r7
 80004da:	4359      	muls	r1, r3
 80004dc:	4343      	muls	r3, r0
 80004de:	4370      	muls	r0, r6
 80004e0:	437e      	muls	r6, r7
 80004e2:	0c0f      	lsrs	r7, r1, #16
 80004e4:	18f6      	adds	r6, r6, r3
 80004e6:	0424      	lsls	r4, r4, #16
 80004e8:	19be      	adds	r6, r7, r6
 80004ea:	4464      	add	r4, ip
 80004ec:	4442      	add	r2, r8
 80004ee:	468c      	mov	ip, r1
 80004f0:	42b3      	cmp	r3, r6
 80004f2:	d903      	bls.n	80004fc <__aeabi_dmul+0x2a0>
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	025b      	lsls	r3, r3, #9
 80004f8:	4698      	mov	r8, r3
 80004fa:	4440      	add	r0, r8
 80004fc:	9b02      	ldr	r3, [sp, #8]
 80004fe:	4661      	mov	r1, ip
 8000500:	4698      	mov	r8, r3
 8000502:	9b04      	ldr	r3, [sp, #16]
 8000504:	0437      	lsls	r7, r6, #16
 8000506:	4443      	add	r3, r8
 8000508:	469b      	mov	fp, r3
 800050a:	45ab      	cmp	fp, r5
 800050c:	41ad      	sbcs	r5, r5
 800050e:	426b      	negs	r3, r5
 8000510:	040d      	lsls	r5, r1, #16
 8000512:	9905      	ldr	r1, [sp, #20]
 8000514:	0c2d      	lsrs	r5, r5, #16
 8000516:	468c      	mov	ip, r1
 8000518:	197f      	adds	r7, r7, r5
 800051a:	4467      	add	r7, ip
 800051c:	18fd      	adds	r5, r7, r3
 800051e:	46a8      	mov	r8, r5
 8000520:	465d      	mov	r5, fp
 8000522:	192d      	adds	r5, r5, r4
 8000524:	42a5      	cmp	r5, r4
 8000526:	41a4      	sbcs	r4, r4
 8000528:	4693      	mov	fp, r2
 800052a:	4264      	negs	r4, r4
 800052c:	46a4      	mov	ip, r4
 800052e:	44c3      	add	fp, r8
 8000530:	44dc      	add	ip, fp
 8000532:	428f      	cmp	r7, r1
 8000534:	41bf      	sbcs	r7, r7
 8000536:	4598      	cmp	r8, r3
 8000538:	419b      	sbcs	r3, r3
 800053a:	4593      	cmp	fp, r2
 800053c:	4192      	sbcs	r2, r2
 800053e:	45a4      	cmp	ip, r4
 8000540:	41a4      	sbcs	r4, r4
 8000542:	425b      	negs	r3, r3
 8000544:	427f      	negs	r7, r7
 8000546:	431f      	orrs	r7, r3
 8000548:	0c36      	lsrs	r6, r6, #16
 800054a:	4252      	negs	r2, r2
 800054c:	4264      	negs	r4, r4
 800054e:	19bf      	adds	r7, r7, r6
 8000550:	4322      	orrs	r2, r4
 8000552:	18bf      	adds	r7, r7, r2
 8000554:	4662      	mov	r2, ip
 8000556:	1838      	adds	r0, r7, r0
 8000558:	0243      	lsls	r3, r0, #9
 800055a:	0dd2      	lsrs	r2, r2, #23
 800055c:	9903      	ldr	r1, [sp, #12]
 800055e:	4313      	orrs	r3, r2
 8000560:	026a      	lsls	r2, r5, #9
 8000562:	430a      	orrs	r2, r1
 8000564:	1e50      	subs	r0, r2, #1
 8000566:	4182      	sbcs	r2, r0
 8000568:	4661      	mov	r1, ip
 800056a:	0ded      	lsrs	r5, r5, #23
 800056c:	432a      	orrs	r2, r5
 800056e:	024e      	lsls	r6, r1, #9
 8000570:	4332      	orrs	r2, r6
 8000572:	01d9      	lsls	r1, r3, #7
 8000574:	d400      	bmi.n	8000578 <__aeabi_dmul+0x31c>
 8000576:	e0b3      	b.n	80006e0 <__aeabi_dmul+0x484>
 8000578:	2601      	movs	r6, #1
 800057a:	0850      	lsrs	r0, r2, #1
 800057c:	4032      	ands	r2, r6
 800057e:	4302      	orrs	r2, r0
 8000580:	07de      	lsls	r6, r3, #31
 8000582:	4332      	orrs	r2, r6
 8000584:	085b      	lsrs	r3, r3, #1
 8000586:	4c22      	ldr	r4, [pc, #136]	; (8000610 <__aeabi_dmul+0x3b4>)
 8000588:	4454      	add	r4, sl
 800058a:	2c00      	cmp	r4, #0
 800058c:	dd62      	ble.n	8000654 <__aeabi_dmul+0x3f8>
 800058e:	0751      	lsls	r1, r2, #29
 8000590:	d009      	beq.n	80005a6 <__aeabi_dmul+0x34a>
 8000592:	200f      	movs	r0, #15
 8000594:	4010      	ands	r0, r2
 8000596:	2804      	cmp	r0, #4
 8000598:	d005      	beq.n	80005a6 <__aeabi_dmul+0x34a>
 800059a:	1d10      	adds	r0, r2, #4
 800059c:	4290      	cmp	r0, r2
 800059e:	4192      	sbcs	r2, r2
 80005a0:	4252      	negs	r2, r2
 80005a2:	189b      	adds	r3, r3, r2
 80005a4:	0002      	movs	r2, r0
 80005a6:	01d9      	lsls	r1, r3, #7
 80005a8:	d504      	bpl.n	80005b4 <__aeabi_dmul+0x358>
 80005aa:	2480      	movs	r4, #128	; 0x80
 80005ac:	4819      	ldr	r0, [pc, #100]	; (8000614 <__aeabi_dmul+0x3b8>)
 80005ae:	00e4      	lsls	r4, r4, #3
 80005b0:	4003      	ands	r3, r0
 80005b2:	4454      	add	r4, sl
 80005b4:	4818      	ldr	r0, [pc, #96]	; (8000618 <__aeabi_dmul+0x3bc>)
 80005b6:	4284      	cmp	r4, r0
 80005b8:	dd00      	ble.n	80005bc <__aeabi_dmul+0x360>
 80005ba:	e727      	b.n	800040c <__aeabi_dmul+0x1b0>
 80005bc:	075e      	lsls	r6, r3, #29
 80005be:	025b      	lsls	r3, r3, #9
 80005c0:	08d2      	lsrs	r2, r2, #3
 80005c2:	0b1f      	lsrs	r7, r3, #12
 80005c4:	0563      	lsls	r3, r4, #21
 80005c6:	4316      	orrs	r6, r2
 80005c8:	0d5b      	lsrs	r3, r3, #21
 80005ca:	e6b2      	b.n	8000332 <__aeabi_dmul+0xd6>
 80005cc:	2300      	movs	r3, #0
 80005ce:	4699      	mov	r9, r3
 80005d0:	3301      	adds	r3, #1
 80005d2:	2704      	movs	r7, #4
 80005d4:	2600      	movs	r6, #0
 80005d6:	469b      	mov	fp, r3
 80005d8:	e664      	b.n	80002a4 <__aeabi_dmul+0x48>
 80005da:	2303      	movs	r3, #3
 80005dc:	9701      	str	r7, [sp, #4]
 80005de:	4681      	mov	r9, r0
 80005e0:	270c      	movs	r7, #12
 80005e2:	469b      	mov	fp, r3
 80005e4:	e65e      	b.n	80002a4 <__aeabi_dmul+0x48>
 80005e6:	2201      	movs	r2, #1
 80005e8:	2001      	movs	r0, #1
 80005ea:	4317      	orrs	r7, r2
 80005ec:	2200      	movs	r2, #0
 80005ee:	e676      	b.n	80002de <__aeabi_dmul+0x82>
 80005f0:	2303      	movs	r3, #3
 80005f2:	2003      	movs	r0, #3
 80005f4:	431f      	orrs	r7, r3
 80005f6:	4643      	mov	r3, r8
 80005f8:	e671      	b.n	80002de <__aeabi_dmul+0x82>
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	000007ff 	.word	0x000007ff
 8000600:	fffffc01 	.word	0xfffffc01
 8000604:	08003d70 	.word	0x08003d70
 8000608:	800fffff 	.word	0x800fffff
 800060c:	fffffc0d 	.word	0xfffffc0d
 8000610:	000003ff 	.word	0x000003ff
 8000614:	feffffff 	.word	0xfeffffff
 8000618:	000007fe 	.word	0x000007fe
 800061c:	2300      	movs	r3, #0
 800061e:	2780      	movs	r7, #128	; 0x80
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	033f      	lsls	r7, r7, #12
 8000624:	2600      	movs	r6, #0
 8000626:	4b43      	ldr	r3, [pc, #268]	; (8000734 <__aeabi_dmul+0x4d8>)
 8000628:	e683      	b.n	8000332 <__aeabi_dmul+0xd6>
 800062a:	9b01      	ldr	r3, [sp, #4]
 800062c:	0032      	movs	r2, r6
 800062e:	46a4      	mov	ip, r4
 8000630:	4658      	mov	r0, fp
 8000632:	e670      	b.n	8000316 <__aeabi_dmul+0xba>
 8000634:	46ac      	mov	ip, r5
 8000636:	e66e      	b.n	8000316 <__aeabi_dmul+0xba>
 8000638:	2780      	movs	r7, #128	; 0x80
 800063a:	9901      	ldr	r1, [sp, #4]
 800063c:	033f      	lsls	r7, r7, #12
 800063e:	4239      	tst	r1, r7
 8000640:	d02d      	beq.n	800069e <__aeabi_dmul+0x442>
 8000642:	423b      	tst	r3, r7
 8000644:	d12b      	bne.n	800069e <__aeabi_dmul+0x442>
 8000646:	431f      	orrs	r7, r3
 8000648:	033f      	lsls	r7, r7, #12
 800064a:	0b3f      	lsrs	r7, r7, #12
 800064c:	9500      	str	r5, [sp, #0]
 800064e:	0016      	movs	r6, r2
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <__aeabi_dmul+0x4d8>)
 8000652:	e66e      	b.n	8000332 <__aeabi_dmul+0xd6>
 8000654:	2501      	movs	r5, #1
 8000656:	1b2d      	subs	r5, r5, r4
 8000658:	2d38      	cmp	r5, #56	; 0x38
 800065a:	dd00      	ble.n	800065e <__aeabi_dmul+0x402>
 800065c:	e666      	b.n	800032c <__aeabi_dmul+0xd0>
 800065e:	2d1f      	cmp	r5, #31
 8000660:	dc40      	bgt.n	80006e4 <__aeabi_dmul+0x488>
 8000662:	4835      	ldr	r0, [pc, #212]	; (8000738 <__aeabi_dmul+0x4dc>)
 8000664:	001c      	movs	r4, r3
 8000666:	4450      	add	r0, sl
 8000668:	0016      	movs	r6, r2
 800066a:	4082      	lsls	r2, r0
 800066c:	4084      	lsls	r4, r0
 800066e:	40ee      	lsrs	r6, r5
 8000670:	1e50      	subs	r0, r2, #1
 8000672:	4182      	sbcs	r2, r0
 8000674:	4334      	orrs	r4, r6
 8000676:	4314      	orrs	r4, r2
 8000678:	40eb      	lsrs	r3, r5
 800067a:	0762      	lsls	r2, r4, #29
 800067c:	d009      	beq.n	8000692 <__aeabi_dmul+0x436>
 800067e:	220f      	movs	r2, #15
 8000680:	4022      	ands	r2, r4
 8000682:	2a04      	cmp	r2, #4
 8000684:	d005      	beq.n	8000692 <__aeabi_dmul+0x436>
 8000686:	0022      	movs	r2, r4
 8000688:	1d14      	adds	r4, r2, #4
 800068a:	4294      	cmp	r4, r2
 800068c:	4180      	sbcs	r0, r0
 800068e:	4240      	negs	r0, r0
 8000690:	181b      	adds	r3, r3, r0
 8000692:	021a      	lsls	r2, r3, #8
 8000694:	d53e      	bpl.n	8000714 <__aeabi_dmul+0x4b8>
 8000696:	2301      	movs	r3, #1
 8000698:	2700      	movs	r7, #0
 800069a:	2600      	movs	r6, #0
 800069c:	e649      	b.n	8000332 <__aeabi_dmul+0xd6>
 800069e:	2780      	movs	r7, #128	; 0x80
 80006a0:	9b01      	ldr	r3, [sp, #4]
 80006a2:	033f      	lsls	r7, r7, #12
 80006a4:	431f      	orrs	r7, r3
 80006a6:	033f      	lsls	r7, r7, #12
 80006a8:	0b3f      	lsrs	r7, r7, #12
 80006aa:	9400      	str	r4, [sp, #0]
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <__aeabi_dmul+0x4d8>)
 80006ae:	e640      	b.n	8000332 <__aeabi_dmul+0xd6>
 80006b0:	0003      	movs	r3, r0
 80006b2:	465a      	mov	r2, fp
 80006b4:	3b28      	subs	r3, #40	; 0x28
 80006b6:	409a      	lsls	r2, r3
 80006b8:	2600      	movs	r6, #0
 80006ba:	9201      	str	r2, [sp, #4]
 80006bc:	e66d      	b.n	800039a <__aeabi_dmul+0x13e>
 80006be:	4658      	mov	r0, fp
 80006c0:	f000 fc34 	bl	8000f2c <__clzsi2>
 80006c4:	3020      	adds	r0, #32
 80006c6:	e657      	b.n	8000378 <__aeabi_dmul+0x11c>
 80006c8:	0003      	movs	r3, r0
 80006ca:	4652      	mov	r2, sl
 80006cc:	3b28      	subs	r3, #40	; 0x28
 80006ce:	409a      	lsls	r2, r3
 80006d0:	0013      	movs	r3, r2
 80006d2:	2200      	movs	r2, #0
 80006d4:	e693      	b.n	80003fe <__aeabi_dmul+0x1a2>
 80006d6:	4650      	mov	r0, sl
 80006d8:	f000 fc28 	bl	8000f2c <__clzsi2>
 80006dc:	3020      	adds	r0, #32
 80006de:	e67b      	b.n	80003d8 <__aeabi_dmul+0x17c>
 80006e0:	46ca      	mov	sl, r9
 80006e2:	e750      	b.n	8000586 <__aeabi_dmul+0x32a>
 80006e4:	201f      	movs	r0, #31
 80006e6:	001e      	movs	r6, r3
 80006e8:	4240      	negs	r0, r0
 80006ea:	1b04      	subs	r4, r0, r4
 80006ec:	40e6      	lsrs	r6, r4
 80006ee:	2d20      	cmp	r5, #32
 80006f0:	d003      	beq.n	80006fa <__aeabi_dmul+0x49e>
 80006f2:	4c12      	ldr	r4, [pc, #72]	; (800073c <__aeabi_dmul+0x4e0>)
 80006f4:	4454      	add	r4, sl
 80006f6:	40a3      	lsls	r3, r4
 80006f8:	431a      	orrs	r2, r3
 80006fa:	1e50      	subs	r0, r2, #1
 80006fc:	4182      	sbcs	r2, r0
 80006fe:	4332      	orrs	r2, r6
 8000700:	2607      	movs	r6, #7
 8000702:	2700      	movs	r7, #0
 8000704:	4016      	ands	r6, r2
 8000706:	d009      	beq.n	800071c <__aeabi_dmul+0x4c0>
 8000708:	200f      	movs	r0, #15
 800070a:	2300      	movs	r3, #0
 800070c:	4010      	ands	r0, r2
 800070e:	0014      	movs	r4, r2
 8000710:	2804      	cmp	r0, #4
 8000712:	d1b9      	bne.n	8000688 <__aeabi_dmul+0x42c>
 8000714:	0022      	movs	r2, r4
 8000716:	075e      	lsls	r6, r3, #29
 8000718:	025b      	lsls	r3, r3, #9
 800071a:	0b1f      	lsrs	r7, r3, #12
 800071c:	08d2      	lsrs	r2, r2, #3
 800071e:	4316      	orrs	r6, r2
 8000720:	2300      	movs	r3, #0
 8000722:	e606      	b.n	8000332 <__aeabi_dmul+0xd6>
 8000724:	2780      	movs	r7, #128	; 0x80
 8000726:	033f      	lsls	r7, r7, #12
 8000728:	431f      	orrs	r7, r3
 800072a:	033f      	lsls	r7, r7, #12
 800072c:	0b3f      	lsrs	r7, r7, #12
 800072e:	0016      	movs	r6, r2
 8000730:	4b00      	ldr	r3, [pc, #0]	; (8000734 <__aeabi_dmul+0x4d8>)
 8000732:	e5fe      	b.n	8000332 <__aeabi_dmul+0xd6>
 8000734:	000007ff 	.word	0x000007ff
 8000738:	0000041e 	.word	0x0000041e
 800073c:	0000043e 	.word	0x0000043e

08000740 <__aeabi_dsub>:
 8000740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000742:	4657      	mov	r7, sl
 8000744:	464e      	mov	r6, r9
 8000746:	4645      	mov	r5, r8
 8000748:	46de      	mov	lr, fp
 800074a:	000c      	movs	r4, r1
 800074c:	0309      	lsls	r1, r1, #12
 800074e:	b5e0      	push	{r5, r6, r7, lr}
 8000750:	0a49      	lsrs	r1, r1, #9
 8000752:	0f46      	lsrs	r6, r0, #29
 8000754:	005f      	lsls	r7, r3, #1
 8000756:	4331      	orrs	r1, r6
 8000758:	031e      	lsls	r6, r3, #12
 800075a:	0fdb      	lsrs	r3, r3, #31
 800075c:	0a76      	lsrs	r6, r6, #9
 800075e:	469b      	mov	fp, r3
 8000760:	0f53      	lsrs	r3, r2, #29
 8000762:	4333      	orrs	r3, r6
 8000764:	4ec8      	ldr	r6, [pc, #800]	; (8000a88 <__aeabi_dsub+0x348>)
 8000766:	0065      	lsls	r5, r4, #1
 8000768:	00c0      	lsls	r0, r0, #3
 800076a:	0fe4      	lsrs	r4, r4, #31
 800076c:	00d2      	lsls	r2, r2, #3
 800076e:	0d6d      	lsrs	r5, r5, #21
 8000770:	46a2      	mov	sl, r4
 8000772:	4681      	mov	r9, r0
 8000774:	0d7f      	lsrs	r7, r7, #21
 8000776:	469c      	mov	ip, r3
 8000778:	4690      	mov	r8, r2
 800077a:	42b7      	cmp	r7, r6
 800077c:	d100      	bne.n	8000780 <__aeabi_dsub+0x40>
 800077e:	e0b9      	b.n	80008f4 <__aeabi_dsub+0x1b4>
 8000780:	465b      	mov	r3, fp
 8000782:	2601      	movs	r6, #1
 8000784:	4073      	eors	r3, r6
 8000786:	469b      	mov	fp, r3
 8000788:	1bee      	subs	r6, r5, r7
 800078a:	45a3      	cmp	fp, r4
 800078c:	d100      	bne.n	8000790 <__aeabi_dsub+0x50>
 800078e:	e083      	b.n	8000898 <__aeabi_dsub+0x158>
 8000790:	2e00      	cmp	r6, #0
 8000792:	dd63      	ble.n	800085c <__aeabi_dsub+0x11c>
 8000794:	2f00      	cmp	r7, #0
 8000796:	d000      	beq.n	800079a <__aeabi_dsub+0x5a>
 8000798:	e0b1      	b.n	80008fe <__aeabi_dsub+0x1be>
 800079a:	4663      	mov	r3, ip
 800079c:	4313      	orrs	r3, r2
 800079e:	d100      	bne.n	80007a2 <__aeabi_dsub+0x62>
 80007a0:	e123      	b.n	80009ea <__aeabi_dsub+0x2aa>
 80007a2:	1e73      	subs	r3, r6, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d000      	beq.n	80007aa <__aeabi_dsub+0x6a>
 80007a8:	e1ba      	b.n	8000b20 <__aeabi_dsub+0x3e0>
 80007aa:	1a86      	subs	r6, r0, r2
 80007ac:	4663      	mov	r3, ip
 80007ae:	42b0      	cmp	r0, r6
 80007b0:	4180      	sbcs	r0, r0
 80007b2:	2501      	movs	r5, #1
 80007b4:	1ac9      	subs	r1, r1, r3
 80007b6:	4240      	negs	r0, r0
 80007b8:	1a09      	subs	r1, r1, r0
 80007ba:	020b      	lsls	r3, r1, #8
 80007bc:	d400      	bmi.n	80007c0 <__aeabi_dsub+0x80>
 80007be:	e147      	b.n	8000a50 <__aeabi_dsub+0x310>
 80007c0:	0249      	lsls	r1, r1, #9
 80007c2:	0a4b      	lsrs	r3, r1, #9
 80007c4:	4698      	mov	r8, r3
 80007c6:	4643      	mov	r3, r8
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_dsub+0x8e>
 80007cc:	e189      	b.n	8000ae2 <__aeabi_dsub+0x3a2>
 80007ce:	4640      	mov	r0, r8
 80007d0:	f000 fbac 	bl	8000f2c <__clzsi2>
 80007d4:	0003      	movs	r3, r0
 80007d6:	3b08      	subs	r3, #8
 80007d8:	2b1f      	cmp	r3, #31
 80007da:	dd00      	ble.n	80007de <__aeabi_dsub+0x9e>
 80007dc:	e17c      	b.n	8000ad8 <__aeabi_dsub+0x398>
 80007de:	2220      	movs	r2, #32
 80007e0:	0030      	movs	r0, r6
 80007e2:	1ad2      	subs	r2, r2, r3
 80007e4:	4641      	mov	r1, r8
 80007e6:	40d0      	lsrs	r0, r2
 80007e8:	4099      	lsls	r1, r3
 80007ea:	0002      	movs	r2, r0
 80007ec:	409e      	lsls	r6, r3
 80007ee:	430a      	orrs	r2, r1
 80007f0:	429d      	cmp	r5, r3
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_dsub+0xb6>
 80007f4:	e16a      	b.n	8000acc <__aeabi_dsub+0x38c>
 80007f6:	1b5d      	subs	r5, r3, r5
 80007f8:	1c6b      	adds	r3, r5, #1
 80007fa:	2b1f      	cmp	r3, #31
 80007fc:	dd00      	ble.n	8000800 <__aeabi_dsub+0xc0>
 80007fe:	e194      	b.n	8000b2a <__aeabi_dsub+0x3ea>
 8000800:	2120      	movs	r1, #32
 8000802:	0010      	movs	r0, r2
 8000804:	0035      	movs	r5, r6
 8000806:	1ac9      	subs	r1, r1, r3
 8000808:	408e      	lsls	r6, r1
 800080a:	40da      	lsrs	r2, r3
 800080c:	4088      	lsls	r0, r1
 800080e:	40dd      	lsrs	r5, r3
 8000810:	1e71      	subs	r1, r6, #1
 8000812:	418e      	sbcs	r6, r1
 8000814:	0011      	movs	r1, r2
 8000816:	2207      	movs	r2, #7
 8000818:	4328      	orrs	r0, r5
 800081a:	2500      	movs	r5, #0
 800081c:	4306      	orrs	r6, r0
 800081e:	4032      	ands	r2, r6
 8000820:	2a00      	cmp	r2, #0
 8000822:	d009      	beq.n	8000838 <__aeabi_dsub+0xf8>
 8000824:	230f      	movs	r3, #15
 8000826:	4033      	ands	r3, r6
 8000828:	2b04      	cmp	r3, #4
 800082a:	d005      	beq.n	8000838 <__aeabi_dsub+0xf8>
 800082c:	1d33      	adds	r3, r6, #4
 800082e:	42b3      	cmp	r3, r6
 8000830:	41b6      	sbcs	r6, r6
 8000832:	4276      	negs	r6, r6
 8000834:	1989      	adds	r1, r1, r6
 8000836:	001e      	movs	r6, r3
 8000838:	020b      	lsls	r3, r1, #8
 800083a:	d400      	bmi.n	800083e <__aeabi_dsub+0xfe>
 800083c:	e23d      	b.n	8000cba <__aeabi_dsub+0x57a>
 800083e:	1c6a      	adds	r2, r5, #1
 8000840:	4b91      	ldr	r3, [pc, #580]	; (8000a88 <__aeabi_dsub+0x348>)
 8000842:	0555      	lsls	r5, r2, #21
 8000844:	0d6d      	lsrs	r5, r5, #21
 8000846:	429a      	cmp	r2, r3
 8000848:	d100      	bne.n	800084c <__aeabi_dsub+0x10c>
 800084a:	e119      	b.n	8000a80 <__aeabi_dsub+0x340>
 800084c:	4a8f      	ldr	r2, [pc, #572]	; (8000a8c <__aeabi_dsub+0x34c>)
 800084e:	08f6      	lsrs	r6, r6, #3
 8000850:	400a      	ands	r2, r1
 8000852:	0757      	lsls	r7, r2, #29
 8000854:	0252      	lsls	r2, r2, #9
 8000856:	4337      	orrs	r7, r6
 8000858:	0b12      	lsrs	r2, r2, #12
 800085a:	e09b      	b.n	8000994 <__aeabi_dsub+0x254>
 800085c:	2e00      	cmp	r6, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_dsub+0x122>
 8000860:	e0c5      	b.n	80009ee <__aeabi_dsub+0x2ae>
 8000862:	1c6e      	adds	r6, r5, #1
 8000864:	0576      	lsls	r6, r6, #21
 8000866:	0d76      	lsrs	r6, r6, #21
 8000868:	2e01      	cmp	r6, #1
 800086a:	dc00      	bgt.n	800086e <__aeabi_dsub+0x12e>
 800086c:	e148      	b.n	8000b00 <__aeabi_dsub+0x3c0>
 800086e:	4667      	mov	r7, ip
 8000870:	1a86      	subs	r6, r0, r2
 8000872:	1bcb      	subs	r3, r1, r7
 8000874:	42b0      	cmp	r0, r6
 8000876:	41bf      	sbcs	r7, r7
 8000878:	427f      	negs	r7, r7
 800087a:	46b8      	mov	r8, r7
 800087c:	001f      	movs	r7, r3
 800087e:	4643      	mov	r3, r8
 8000880:	1aff      	subs	r7, r7, r3
 8000882:	003b      	movs	r3, r7
 8000884:	46b8      	mov	r8, r7
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	d500      	bpl.n	800088c <__aeabi_dsub+0x14c>
 800088a:	e15f      	b.n	8000b4c <__aeabi_dsub+0x40c>
 800088c:	4337      	orrs	r7, r6
 800088e:	d19a      	bne.n	80007c6 <__aeabi_dsub+0x86>
 8000890:	2200      	movs	r2, #0
 8000892:	2400      	movs	r4, #0
 8000894:	2500      	movs	r5, #0
 8000896:	e079      	b.n	800098c <__aeabi_dsub+0x24c>
 8000898:	2e00      	cmp	r6, #0
 800089a:	dc00      	bgt.n	800089e <__aeabi_dsub+0x15e>
 800089c:	e0fa      	b.n	8000a94 <__aeabi_dsub+0x354>
 800089e:	2f00      	cmp	r7, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dsub+0x164>
 80008a2:	e08d      	b.n	80009c0 <__aeabi_dsub+0x280>
 80008a4:	4b78      	ldr	r3, [pc, #480]	; (8000a88 <__aeabi_dsub+0x348>)
 80008a6:	429d      	cmp	r5, r3
 80008a8:	d067      	beq.n	800097a <__aeabi_dsub+0x23a>
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	4667      	mov	r7, ip
 80008ae:	041b      	lsls	r3, r3, #16
 80008b0:	431f      	orrs	r7, r3
 80008b2:	46bc      	mov	ip, r7
 80008b4:	2e38      	cmp	r6, #56	; 0x38
 80008b6:	dc00      	bgt.n	80008ba <__aeabi_dsub+0x17a>
 80008b8:	e152      	b.n	8000b60 <__aeabi_dsub+0x420>
 80008ba:	4663      	mov	r3, ip
 80008bc:	4313      	orrs	r3, r2
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	4193      	sbcs	r3, r2
 80008c2:	181e      	adds	r6, r3, r0
 80008c4:	4286      	cmp	r6, r0
 80008c6:	4180      	sbcs	r0, r0
 80008c8:	4240      	negs	r0, r0
 80008ca:	1809      	adds	r1, r1, r0
 80008cc:	020b      	lsls	r3, r1, #8
 80008ce:	d400      	bmi.n	80008d2 <__aeabi_dsub+0x192>
 80008d0:	e0be      	b.n	8000a50 <__aeabi_dsub+0x310>
 80008d2:	4b6d      	ldr	r3, [pc, #436]	; (8000a88 <__aeabi_dsub+0x348>)
 80008d4:	3501      	adds	r5, #1
 80008d6:	429d      	cmp	r5, r3
 80008d8:	d100      	bne.n	80008dc <__aeabi_dsub+0x19c>
 80008da:	e0d2      	b.n	8000a82 <__aeabi_dsub+0x342>
 80008dc:	4a6b      	ldr	r2, [pc, #428]	; (8000a8c <__aeabi_dsub+0x34c>)
 80008de:	0873      	lsrs	r3, r6, #1
 80008e0:	400a      	ands	r2, r1
 80008e2:	2101      	movs	r1, #1
 80008e4:	400e      	ands	r6, r1
 80008e6:	431e      	orrs	r6, r3
 80008e8:	0851      	lsrs	r1, r2, #1
 80008ea:	07d3      	lsls	r3, r2, #31
 80008ec:	2207      	movs	r2, #7
 80008ee:	431e      	orrs	r6, r3
 80008f0:	4032      	ands	r2, r6
 80008f2:	e795      	b.n	8000820 <__aeabi_dsub+0xe0>
 80008f4:	001e      	movs	r6, r3
 80008f6:	4316      	orrs	r6, r2
 80008f8:	d000      	beq.n	80008fc <__aeabi_dsub+0x1bc>
 80008fa:	e745      	b.n	8000788 <__aeabi_dsub+0x48>
 80008fc:	e740      	b.n	8000780 <__aeabi_dsub+0x40>
 80008fe:	4b62      	ldr	r3, [pc, #392]	; (8000a88 <__aeabi_dsub+0x348>)
 8000900:	429d      	cmp	r5, r3
 8000902:	d03a      	beq.n	800097a <__aeabi_dsub+0x23a>
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	4667      	mov	r7, ip
 8000908:	041b      	lsls	r3, r3, #16
 800090a:	431f      	orrs	r7, r3
 800090c:	46bc      	mov	ip, r7
 800090e:	2e38      	cmp	r6, #56	; 0x38
 8000910:	dd00      	ble.n	8000914 <__aeabi_dsub+0x1d4>
 8000912:	e0eb      	b.n	8000aec <__aeabi_dsub+0x3ac>
 8000914:	2e1f      	cmp	r6, #31
 8000916:	dc00      	bgt.n	800091a <__aeabi_dsub+0x1da>
 8000918:	e13a      	b.n	8000b90 <__aeabi_dsub+0x450>
 800091a:	0033      	movs	r3, r6
 800091c:	4667      	mov	r7, ip
 800091e:	3b20      	subs	r3, #32
 8000920:	40df      	lsrs	r7, r3
 8000922:	003b      	movs	r3, r7
 8000924:	2e20      	cmp	r6, #32
 8000926:	d005      	beq.n	8000934 <__aeabi_dsub+0x1f4>
 8000928:	2740      	movs	r7, #64	; 0x40
 800092a:	1bbf      	subs	r7, r7, r6
 800092c:	4666      	mov	r6, ip
 800092e:	40be      	lsls	r6, r7
 8000930:	4332      	orrs	r2, r6
 8000932:	4690      	mov	r8, r2
 8000934:	4646      	mov	r6, r8
 8000936:	1e72      	subs	r2, r6, #1
 8000938:	4196      	sbcs	r6, r2
 800093a:	4333      	orrs	r3, r6
 800093c:	e0da      	b.n	8000af4 <__aeabi_dsub+0x3b4>
 800093e:	2b00      	cmp	r3, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_dsub+0x204>
 8000942:	e214      	b.n	8000d6e <__aeabi_dsub+0x62e>
 8000944:	4663      	mov	r3, ip
 8000946:	4313      	orrs	r3, r2
 8000948:	d100      	bne.n	800094c <__aeabi_dsub+0x20c>
 800094a:	e168      	b.n	8000c1e <__aeabi_dsub+0x4de>
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	074e      	lsls	r6, r1, #29
 8000950:	08c0      	lsrs	r0, r0, #3
 8000952:	08c9      	lsrs	r1, r1, #3
 8000954:	031b      	lsls	r3, r3, #12
 8000956:	4306      	orrs	r6, r0
 8000958:	4219      	tst	r1, r3
 800095a:	d008      	beq.n	800096e <__aeabi_dsub+0x22e>
 800095c:	4660      	mov	r0, ip
 800095e:	08c0      	lsrs	r0, r0, #3
 8000960:	4218      	tst	r0, r3
 8000962:	d104      	bne.n	800096e <__aeabi_dsub+0x22e>
 8000964:	4663      	mov	r3, ip
 8000966:	0001      	movs	r1, r0
 8000968:	08d2      	lsrs	r2, r2, #3
 800096a:	075e      	lsls	r6, r3, #29
 800096c:	4316      	orrs	r6, r2
 800096e:	00f3      	lsls	r3, r6, #3
 8000970:	4699      	mov	r9, r3
 8000972:	00c9      	lsls	r1, r1, #3
 8000974:	0f72      	lsrs	r2, r6, #29
 8000976:	4d44      	ldr	r5, [pc, #272]	; (8000a88 <__aeabi_dsub+0x348>)
 8000978:	4311      	orrs	r1, r2
 800097a:	464b      	mov	r3, r9
 800097c:	08de      	lsrs	r6, r3, #3
 800097e:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <__aeabi_dsub+0x348>)
 8000980:	074f      	lsls	r7, r1, #29
 8000982:	4337      	orrs	r7, r6
 8000984:	08ca      	lsrs	r2, r1, #3
 8000986:	429d      	cmp	r5, r3
 8000988:	d100      	bne.n	800098c <__aeabi_dsub+0x24c>
 800098a:	e06e      	b.n	8000a6a <__aeabi_dsub+0x32a>
 800098c:	0312      	lsls	r2, r2, #12
 800098e:	056d      	lsls	r5, r5, #21
 8000990:	0b12      	lsrs	r2, r2, #12
 8000992:	0d6d      	lsrs	r5, r5, #21
 8000994:	2100      	movs	r1, #0
 8000996:	0312      	lsls	r2, r2, #12
 8000998:	0b13      	lsrs	r3, r2, #12
 800099a:	0d0a      	lsrs	r2, r1, #20
 800099c:	0512      	lsls	r2, r2, #20
 800099e:	431a      	orrs	r2, r3
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <__aeabi_dsub+0x350>)
 80009a2:	052d      	lsls	r5, r5, #20
 80009a4:	4013      	ands	r3, r2
 80009a6:	432b      	orrs	r3, r5
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	07e4      	lsls	r4, r4, #31
 80009ac:	085b      	lsrs	r3, r3, #1
 80009ae:	4323      	orrs	r3, r4
 80009b0:	0038      	movs	r0, r7
 80009b2:	0019      	movs	r1, r3
 80009b4:	bc3c      	pop	{r2, r3, r4, r5}
 80009b6:	4690      	mov	r8, r2
 80009b8:	4699      	mov	r9, r3
 80009ba:	46a2      	mov	sl, r4
 80009bc:	46ab      	mov	fp, r5
 80009be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009c0:	4663      	mov	r3, ip
 80009c2:	4313      	orrs	r3, r2
 80009c4:	d011      	beq.n	80009ea <__aeabi_dsub+0x2aa>
 80009c6:	1e73      	subs	r3, r6, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dsub+0x28e>
 80009cc:	e107      	b.n	8000bde <__aeabi_dsub+0x49e>
 80009ce:	1886      	adds	r6, r0, r2
 80009d0:	4286      	cmp	r6, r0
 80009d2:	4180      	sbcs	r0, r0
 80009d4:	4461      	add	r1, ip
 80009d6:	4240      	negs	r0, r0
 80009d8:	1809      	adds	r1, r1, r0
 80009da:	2501      	movs	r5, #1
 80009dc:	020b      	lsls	r3, r1, #8
 80009de:	d537      	bpl.n	8000a50 <__aeabi_dsub+0x310>
 80009e0:	2502      	movs	r5, #2
 80009e2:	e77b      	b.n	80008dc <__aeabi_dsub+0x19c>
 80009e4:	003e      	movs	r6, r7
 80009e6:	4661      	mov	r1, ip
 80009e8:	4691      	mov	r9, r2
 80009ea:	0035      	movs	r5, r6
 80009ec:	e7c5      	b.n	800097a <__aeabi_dsub+0x23a>
 80009ee:	465c      	mov	r4, fp
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d000      	beq.n	80009f6 <__aeabi_dsub+0x2b6>
 80009f4:	e0e1      	b.n	8000bba <__aeabi_dsub+0x47a>
 80009f6:	000b      	movs	r3, r1
 80009f8:	4303      	orrs	r3, r0
 80009fa:	d0f3      	beq.n	80009e4 <__aeabi_dsub+0x2a4>
 80009fc:	1c73      	adds	r3, r6, #1
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dsub+0x2c2>
 8000a00:	e1ac      	b.n	8000d5c <__aeabi_dsub+0x61c>
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <__aeabi_dsub+0x348>)
 8000a04:	429f      	cmp	r7, r3
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dsub+0x2ca>
 8000a08:	e13a      	b.n	8000c80 <__aeabi_dsub+0x540>
 8000a0a:	43f3      	mvns	r3, r6
 8000a0c:	2b38      	cmp	r3, #56	; 0x38
 8000a0e:	dd00      	ble.n	8000a12 <__aeabi_dsub+0x2d2>
 8000a10:	e16f      	b.n	8000cf2 <__aeabi_dsub+0x5b2>
 8000a12:	2b1f      	cmp	r3, #31
 8000a14:	dd00      	ble.n	8000a18 <__aeabi_dsub+0x2d8>
 8000a16:	e18c      	b.n	8000d32 <__aeabi_dsub+0x5f2>
 8000a18:	2520      	movs	r5, #32
 8000a1a:	000e      	movs	r6, r1
 8000a1c:	1aed      	subs	r5, r5, r3
 8000a1e:	40ae      	lsls	r6, r5
 8000a20:	46b0      	mov	r8, r6
 8000a22:	0006      	movs	r6, r0
 8000a24:	46aa      	mov	sl, r5
 8000a26:	40de      	lsrs	r6, r3
 8000a28:	4645      	mov	r5, r8
 8000a2a:	4335      	orrs	r5, r6
 8000a2c:	002e      	movs	r6, r5
 8000a2e:	4655      	mov	r5, sl
 8000a30:	40d9      	lsrs	r1, r3
 8000a32:	40a8      	lsls	r0, r5
 8000a34:	4663      	mov	r3, ip
 8000a36:	1e45      	subs	r5, r0, #1
 8000a38:	41a8      	sbcs	r0, r5
 8000a3a:	1a5b      	subs	r3, r3, r1
 8000a3c:	469c      	mov	ip, r3
 8000a3e:	4330      	orrs	r0, r6
 8000a40:	1a16      	subs	r6, r2, r0
 8000a42:	42b2      	cmp	r2, r6
 8000a44:	4192      	sbcs	r2, r2
 8000a46:	4663      	mov	r3, ip
 8000a48:	4252      	negs	r2, r2
 8000a4a:	1a99      	subs	r1, r3, r2
 8000a4c:	003d      	movs	r5, r7
 8000a4e:	e6b4      	b.n	80007ba <__aeabi_dsub+0x7a>
 8000a50:	2207      	movs	r2, #7
 8000a52:	4032      	ands	r2, r6
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	d000      	beq.n	8000a5a <__aeabi_dsub+0x31a>
 8000a58:	e6e4      	b.n	8000824 <__aeabi_dsub+0xe4>
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <__aeabi_dsub+0x348>)
 8000a5c:	08f6      	lsrs	r6, r6, #3
 8000a5e:	074f      	lsls	r7, r1, #29
 8000a60:	4337      	orrs	r7, r6
 8000a62:	08ca      	lsrs	r2, r1, #3
 8000a64:	429d      	cmp	r5, r3
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dsub+0x32a>
 8000a68:	e790      	b.n	800098c <__aeabi_dsub+0x24c>
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dsub+0x332>
 8000a70:	e1a6      	b.n	8000dc0 <__aeabi_dsub+0x680>
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	031b      	lsls	r3, r3, #12
 8000a76:	431a      	orrs	r2, r3
 8000a78:	0312      	lsls	r2, r2, #12
 8000a7a:	0b12      	lsrs	r2, r2, #12
 8000a7c:	4d02      	ldr	r5, [pc, #8]	; (8000a88 <__aeabi_dsub+0x348>)
 8000a7e:	e789      	b.n	8000994 <__aeabi_dsub+0x254>
 8000a80:	0015      	movs	r5, r2
 8000a82:	2200      	movs	r2, #0
 8000a84:	2700      	movs	r7, #0
 8000a86:	e785      	b.n	8000994 <__aeabi_dsub+0x254>
 8000a88:	000007ff 	.word	0x000007ff
 8000a8c:	ff7fffff 	.word	0xff7fffff
 8000a90:	800fffff 	.word	0x800fffff
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d000      	beq.n	8000a9a <__aeabi_dsub+0x35a>
 8000a98:	e0c7      	b.n	8000c2a <__aeabi_dsub+0x4ea>
 8000a9a:	1c6b      	adds	r3, r5, #1
 8000a9c:	055e      	lsls	r6, r3, #21
 8000a9e:	0d76      	lsrs	r6, r6, #21
 8000aa0:	2e01      	cmp	r6, #1
 8000aa2:	dc00      	bgt.n	8000aa6 <__aeabi_dsub+0x366>
 8000aa4:	e0f0      	b.n	8000c88 <__aeabi_dsub+0x548>
 8000aa6:	4dc8      	ldr	r5, [pc, #800]	; (8000dc8 <__aeabi_dsub+0x688>)
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dsub+0x36e>
 8000aac:	e0b9      	b.n	8000c22 <__aeabi_dsub+0x4e2>
 8000aae:	1885      	adds	r5, r0, r2
 8000ab0:	000a      	movs	r2, r1
 8000ab2:	4285      	cmp	r5, r0
 8000ab4:	4189      	sbcs	r1, r1
 8000ab6:	4462      	add	r2, ip
 8000ab8:	4249      	negs	r1, r1
 8000aba:	1851      	adds	r1, r2, r1
 8000abc:	2207      	movs	r2, #7
 8000abe:	07ce      	lsls	r6, r1, #31
 8000ac0:	086d      	lsrs	r5, r5, #1
 8000ac2:	432e      	orrs	r6, r5
 8000ac4:	0849      	lsrs	r1, r1, #1
 8000ac6:	4032      	ands	r2, r6
 8000ac8:	001d      	movs	r5, r3
 8000aca:	e6a9      	b.n	8000820 <__aeabi_dsub+0xe0>
 8000acc:	49bf      	ldr	r1, [pc, #764]	; (8000dcc <__aeabi_dsub+0x68c>)
 8000ace:	1aed      	subs	r5, r5, r3
 8000ad0:	4011      	ands	r1, r2
 8000ad2:	2207      	movs	r2, #7
 8000ad4:	4032      	ands	r2, r6
 8000ad6:	e6a3      	b.n	8000820 <__aeabi_dsub+0xe0>
 8000ad8:	0032      	movs	r2, r6
 8000ada:	3828      	subs	r0, #40	; 0x28
 8000adc:	4082      	lsls	r2, r0
 8000ade:	2600      	movs	r6, #0
 8000ae0:	e686      	b.n	80007f0 <__aeabi_dsub+0xb0>
 8000ae2:	0030      	movs	r0, r6
 8000ae4:	f000 fa22 	bl	8000f2c <__clzsi2>
 8000ae8:	3020      	adds	r0, #32
 8000aea:	e673      	b.n	80007d4 <__aeabi_dsub+0x94>
 8000aec:	4663      	mov	r3, ip
 8000aee:	4313      	orrs	r3, r2
 8000af0:	1e5a      	subs	r2, r3, #1
 8000af2:	4193      	sbcs	r3, r2
 8000af4:	1ac6      	subs	r6, r0, r3
 8000af6:	42b0      	cmp	r0, r6
 8000af8:	4180      	sbcs	r0, r0
 8000afa:	4240      	negs	r0, r0
 8000afc:	1a09      	subs	r1, r1, r0
 8000afe:	e65c      	b.n	80007ba <__aeabi_dsub+0x7a>
 8000b00:	000e      	movs	r6, r1
 8000b02:	4667      	mov	r7, ip
 8000b04:	4306      	orrs	r6, r0
 8000b06:	4317      	orrs	r7, r2
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d15e      	bne.n	8000bca <__aeabi_dsub+0x48a>
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d000      	beq.n	8000b12 <__aeabi_dsub+0x3d2>
 8000b10:	e0f3      	b.n	8000cfa <__aeabi_dsub+0x5ba>
 8000b12:	2f00      	cmp	r7, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dsub+0x3d8>
 8000b16:	e11e      	b.n	8000d56 <__aeabi_dsub+0x616>
 8000b18:	465c      	mov	r4, fp
 8000b1a:	4661      	mov	r1, ip
 8000b1c:	4691      	mov	r9, r2
 8000b1e:	e72c      	b.n	800097a <__aeabi_dsub+0x23a>
 8000b20:	4fa9      	ldr	r7, [pc, #676]	; (8000dc8 <__aeabi_dsub+0x688>)
 8000b22:	42be      	cmp	r6, r7
 8000b24:	d07b      	beq.n	8000c1e <__aeabi_dsub+0x4de>
 8000b26:	001e      	movs	r6, r3
 8000b28:	e6f1      	b.n	800090e <__aeabi_dsub+0x1ce>
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	3d1f      	subs	r5, #31
 8000b2e:	40e8      	lsrs	r0, r5
 8000b30:	2b20      	cmp	r3, #32
 8000b32:	d003      	beq.n	8000b3c <__aeabi_dsub+0x3fc>
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	1acb      	subs	r3, r1, r3
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	4316      	orrs	r6, r2
 8000b3c:	1e73      	subs	r3, r6, #1
 8000b3e:	419e      	sbcs	r6, r3
 8000b40:	2207      	movs	r2, #7
 8000b42:	4306      	orrs	r6, r0
 8000b44:	4032      	ands	r2, r6
 8000b46:	2100      	movs	r1, #0
 8000b48:	2500      	movs	r5, #0
 8000b4a:	e783      	b.n	8000a54 <__aeabi_dsub+0x314>
 8000b4c:	1a16      	subs	r6, r2, r0
 8000b4e:	4663      	mov	r3, ip
 8000b50:	42b2      	cmp	r2, r6
 8000b52:	4180      	sbcs	r0, r0
 8000b54:	1a59      	subs	r1, r3, r1
 8000b56:	4240      	negs	r0, r0
 8000b58:	1a0b      	subs	r3, r1, r0
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	465c      	mov	r4, fp
 8000b5e:	e632      	b.n	80007c6 <__aeabi_dsub+0x86>
 8000b60:	2e1f      	cmp	r6, #31
 8000b62:	dd00      	ble.n	8000b66 <__aeabi_dsub+0x426>
 8000b64:	e0ab      	b.n	8000cbe <__aeabi_dsub+0x57e>
 8000b66:	2720      	movs	r7, #32
 8000b68:	1bbb      	subs	r3, r7, r6
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	4663      	mov	r3, ip
 8000b6e:	4657      	mov	r7, sl
 8000b70:	40bb      	lsls	r3, r7
 8000b72:	4699      	mov	r9, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	464f      	mov	r7, r9
 8000b78:	40f3      	lsrs	r3, r6
 8000b7a:	431f      	orrs	r7, r3
 8000b7c:	003b      	movs	r3, r7
 8000b7e:	4657      	mov	r7, sl
 8000b80:	40ba      	lsls	r2, r7
 8000b82:	1e57      	subs	r7, r2, #1
 8000b84:	41ba      	sbcs	r2, r7
 8000b86:	4313      	orrs	r3, r2
 8000b88:	4662      	mov	r2, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	1889      	adds	r1, r1, r2
 8000b8e:	e698      	b.n	80008c2 <__aeabi_dsub+0x182>
 8000b90:	2720      	movs	r7, #32
 8000b92:	1bbb      	subs	r3, r7, r6
 8000b94:	469a      	mov	sl, r3
 8000b96:	4663      	mov	r3, ip
 8000b98:	4657      	mov	r7, sl
 8000b9a:	40bb      	lsls	r3, r7
 8000b9c:	4699      	mov	r9, r3
 8000b9e:	0013      	movs	r3, r2
 8000ba0:	464f      	mov	r7, r9
 8000ba2:	40f3      	lsrs	r3, r6
 8000ba4:	431f      	orrs	r7, r3
 8000ba6:	003b      	movs	r3, r7
 8000ba8:	4657      	mov	r7, sl
 8000baa:	40ba      	lsls	r2, r7
 8000bac:	1e57      	subs	r7, r2, #1
 8000bae:	41ba      	sbcs	r2, r7
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	4662      	mov	r2, ip
 8000bb4:	40f2      	lsrs	r2, r6
 8000bb6:	1a89      	subs	r1, r1, r2
 8000bb8:	e79c      	b.n	8000af4 <__aeabi_dsub+0x3b4>
 8000bba:	4b83      	ldr	r3, [pc, #524]	; (8000dc8 <__aeabi_dsub+0x688>)
 8000bbc:	429f      	cmp	r7, r3
 8000bbe:	d05f      	beq.n	8000c80 <__aeabi_dsub+0x540>
 8000bc0:	2580      	movs	r5, #128	; 0x80
 8000bc2:	042d      	lsls	r5, r5, #16
 8000bc4:	4273      	negs	r3, r6
 8000bc6:	4329      	orrs	r1, r5
 8000bc8:	e720      	b.n	8000a0c <__aeabi_dsub+0x2cc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d10c      	bne.n	8000be8 <__aeabi_dsub+0x4a8>
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dsub+0x494>
 8000bd2:	e0d0      	b.n	8000d76 <__aeabi_dsub+0x636>
 8000bd4:	465c      	mov	r4, fp
 8000bd6:	4661      	mov	r1, ip
 8000bd8:	4691      	mov	r9, r2
 8000bda:	4d7b      	ldr	r5, [pc, #492]	; (8000dc8 <__aeabi_dsub+0x688>)
 8000bdc:	e6cd      	b.n	800097a <__aeabi_dsub+0x23a>
 8000bde:	4f7a      	ldr	r7, [pc, #488]	; (8000dc8 <__aeabi_dsub+0x688>)
 8000be0:	42be      	cmp	r6, r7
 8000be2:	d01c      	beq.n	8000c1e <__aeabi_dsub+0x4de>
 8000be4:	001e      	movs	r6, r3
 8000be6:	e665      	b.n	80008b4 <__aeabi_dsub+0x174>
 8000be8:	2f00      	cmp	r7, #0
 8000bea:	d018      	beq.n	8000c1e <__aeabi_dsub+0x4de>
 8000bec:	08c0      	lsrs	r0, r0, #3
 8000bee:	074e      	lsls	r6, r1, #29
 8000bf0:	4306      	orrs	r6, r0
 8000bf2:	2080      	movs	r0, #128	; 0x80
 8000bf4:	08c9      	lsrs	r1, r1, #3
 8000bf6:	0300      	lsls	r0, r0, #12
 8000bf8:	4201      	tst	r1, r0
 8000bfa:	d008      	beq.n	8000c0e <__aeabi_dsub+0x4ce>
 8000bfc:	4663      	mov	r3, ip
 8000bfe:	08dc      	lsrs	r4, r3, #3
 8000c00:	4204      	tst	r4, r0
 8000c02:	d104      	bne.n	8000c0e <__aeabi_dsub+0x4ce>
 8000c04:	0021      	movs	r1, r4
 8000c06:	46da      	mov	sl, fp
 8000c08:	08d2      	lsrs	r2, r2, #3
 8000c0a:	075e      	lsls	r6, r3, #29
 8000c0c:	4316      	orrs	r6, r2
 8000c0e:	00f3      	lsls	r3, r6, #3
 8000c10:	4699      	mov	r9, r3
 8000c12:	2401      	movs	r4, #1
 8000c14:	4653      	mov	r3, sl
 8000c16:	00c9      	lsls	r1, r1, #3
 8000c18:	0f72      	lsrs	r2, r6, #29
 8000c1a:	4311      	orrs	r1, r2
 8000c1c:	401c      	ands	r4, r3
 8000c1e:	4d6a      	ldr	r5, [pc, #424]	; (8000dc8 <__aeabi_dsub+0x688>)
 8000c20:	e6ab      	b.n	800097a <__aeabi_dsub+0x23a>
 8000c22:	001d      	movs	r5, r3
 8000c24:	2200      	movs	r2, #0
 8000c26:	2700      	movs	r7, #0
 8000c28:	e6b4      	b.n	8000994 <__aeabi_dsub+0x254>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d159      	bne.n	8000ce2 <__aeabi_dsub+0x5a2>
 8000c2e:	000b      	movs	r3, r1
 8000c30:	4303      	orrs	r3, r0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dsub+0x4f6>
 8000c34:	e6d6      	b.n	80009e4 <__aeabi_dsub+0x2a4>
 8000c36:	1c73      	adds	r3, r6, #1
 8000c38:	d100      	bne.n	8000c3c <__aeabi_dsub+0x4fc>
 8000c3a:	e0b2      	b.n	8000da2 <__aeabi_dsub+0x662>
 8000c3c:	4b62      	ldr	r3, [pc, #392]	; (8000dc8 <__aeabi_dsub+0x688>)
 8000c3e:	429f      	cmp	r7, r3
 8000c40:	d01e      	beq.n	8000c80 <__aeabi_dsub+0x540>
 8000c42:	43f3      	mvns	r3, r6
 8000c44:	2b38      	cmp	r3, #56	; 0x38
 8000c46:	dc6f      	bgt.n	8000d28 <__aeabi_dsub+0x5e8>
 8000c48:	2b1f      	cmp	r3, #31
 8000c4a:	dd00      	ble.n	8000c4e <__aeabi_dsub+0x50e>
 8000c4c:	e097      	b.n	8000d7e <__aeabi_dsub+0x63e>
 8000c4e:	2520      	movs	r5, #32
 8000c50:	000e      	movs	r6, r1
 8000c52:	1aed      	subs	r5, r5, r3
 8000c54:	40ae      	lsls	r6, r5
 8000c56:	46b0      	mov	r8, r6
 8000c58:	0006      	movs	r6, r0
 8000c5a:	46aa      	mov	sl, r5
 8000c5c:	40de      	lsrs	r6, r3
 8000c5e:	4645      	mov	r5, r8
 8000c60:	4335      	orrs	r5, r6
 8000c62:	002e      	movs	r6, r5
 8000c64:	4655      	mov	r5, sl
 8000c66:	40a8      	lsls	r0, r5
 8000c68:	40d9      	lsrs	r1, r3
 8000c6a:	1e45      	subs	r5, r0, #1
 8000c6c:	41a8      	sbcs	r0, r5
 8000c6e:	448c      	add	ip, r1
 8000c70:	4306      	orrs	r6, r0
 8000c72:	18b6      	adds	r6, r6, r2
 8000c74:	4296      	cmp	r6, r2
 8000c76:	4192      	sbcs	r2, r2
 8000c78:	4251      	negs	r1, r2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	003d      	movs	r5, r7
 8000c7e:	e625      	b.n	80008cc <__aeabi_dsub+0x18c>
 8000c80:	003d      	movs	r5, r7
 8000c82:	4661      	mov	r1, ip
 8000c84:	4691      	mov	r9, r2
 8000c86:	e678      	b.n	800097a <__aeabi_dsub+0x23a>
 8000c88:	000b      	movs	r3, r1
 8000c8a:	4303      	orrs	r3, r0
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_dsub+0x552>
 8000c90:	e655      	b.n	800093e <__aeabi_dsub+0x1fe>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f5      	beq.n	8000c82 <__aeabi_dsub+0x542>
 8000c96:	4663      	mov	r3, ip
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dsub+0x55e>
 8000c9c:	e66d      	b.n	800097a <__aeabi_dsub+0x23a>
 8000c9e:	1886      	adds	r6, r0, r2
 8000ca0:	4286      	cmp	r6, r0
 8000ca2:	4180      	sbcs	r0, r0
 8000ca4:	4461      	add	r1, ip
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	1809      	adds	r1, r1, r0
 8000caa:	2200      	movs	r2, #0
 8000cac:	020b      	lsls	r3, r1, #8
 8000cae:	d400      	bmi.n	8000cb2 <__aeabi_dsub+0x572>
 8000cb0:	e6d0      	b.n	8000a54 <__aeabi_dsub+0x314>
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <__aeabi_dsub+0x68c>)
 8000cb4:	3501      	adds	r5, #1
 8000cb6:	4019      	ands	r1, r3
 8000cb8:	e5b2      	b.n	8000820 <__aeabi_dsub+0xe0>
 8000cba:	46b1      	mov	r9, r6
 8000cbc:	e65d      	b.n	800097a <__aeabi_dsub+0x23a>
 8000cbe:	0033      	movs	r3, r6
 8000cc0:	4667      	mov	r7, ip
 8000cc2:	3b20      	subs	r3, #32
 8000cc4:	40df      	lsrs	r7, r3
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2e20      	cmp	r6, #32
 8000cca:	d005      	beq.n	8000cd8 <__aeabi_dsub+0x598>
 8000ccc:	2740      	movs	r7, #64	; 0x40
 8000cce:	1bbf      	subs	r7, r7, r6
 8000cd0:	4666      	mov	r6, ip
 8000cd2:	40be      	lsls	r6, r7
 8000cd4:	4332      	orrs	r2, r6
 8000cd6:	4690      	mov	r8, r2
 8000cd8:	4646      	mov	r6, r8
 8000cda:	1e72      	subs	r2, r6, #1
 8000cdc:	4196      	sbcs	r6, r2
 8000cde:	4333      	orrs	r3, r6
 8000ce0:	e5ef      	b.n	80008c2 <__aeabi_dsub+0x182>
 8000ce2:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <__aeabi_dsub+0x688>)
 8000ce4:	429f      	cmp	r7, r3
 8000ce6:	d0cb      	beq.n	8000c80 <__aeabi_dsub+0x540>
 8000ce8:	2580      	movs	r5, #128	; 0x80
 8000cea:	042d      	lsls	r5, r5, #16
 8000cec:	4273      	negs	r3, r6
 8000cee:	4329      	orrs	r1, r5
 8000cf0:	e7a8      	b.n	8000c44 <__aeabi_dsub+0x504>
 8000cf2:	4308      	orrs	r0, r1
 8000cf4:	1e41      	subs	r1, r0, #1
 8000cf6:	4188      	sbcs	r0, r1
 8000cf8:	e6a2      	b.n	8000a40 <__aeabi_dsub+0x300>
 8000cfa:	2f00      	cmp	r7, #0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dsub+0x5c0>
 8000cfe:	e63c      	b.n	800097a <__aeabi_dsub+0x23a>
 8000d00:	4663      	mov	r3, ip
 8000d02:	1a86      	subs	r6, r0, r2
 8000d04:	1acf      	subs	r7, r1, r3
 8000d06:	42b0      	cmp	r0, r6
 8000d08:	419b      	sbcs	r3, r3
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	1afb      	subs	r3, r7, r3
 8000d0e:	4698      	mov	r8, r3
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	d54e      	bpl.n	8000db2 <__aeabi_dsub+0x672>
 8000d14:	1a16      	subs	r6, r2, r0
 8000d16:	4663      	mov	r3, ip
 8000d18:	42b2      	cmp	r2, r6
 8000d1a:	4192      	sbcs	r2, r2
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	4252      	negs	r2, r2
 8000d20:	1a89      	subs	r1, r1, r2
 8000d22:	465c      	mov	r4, fp
 8000d24:	2200      	movs	r2, #0
 8000d26:	e57b      	b.n	8000820 <__aeabi_dsub+0xe0>
 8000d28:	4301      	orrs	r1, r0
 8000d2a:	000e      	movs	r6, r1
 8000d2c:	1e71      	subs	r1, r6, #1
 8000d2e:	418e      	sbcs	r6, r1
 8000d30:	e79f      	b.n	8000c72 <__aeabi_dsub+0x532>
 8000d32:	001d      	movs	r5, r3
 8000d34:	000e      	movs	r6, r1
 8000d36:	3d20      	subs	r5, #32
 8000d38:	40ee      	lsrs	r6, r5
 8000d3a:	46b0      	mov	r8, r6
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d004      	beq.n	8000d4a <__aeabi_dsub+0x60a>
 8000d40:	2540      	movs	r5, #64	; 0x40
 8000d42:	1aeb      	subs	r3, r5, r3
 8000d44:	4099      	lsls	r1, r3
 8000d46:	4308      	orrs	r0, r1
 8000d48:	4681      	mov	r9, r0
 8000d4a:	4648      	mov	r0, r9
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	1e41      	subs	r1, r0, #1
 8000d50:	4188      	sbcs	r0, r1
 8000d52:	4318      	orrs	r0, r3
 8000d54:	e674      	b.n	8000a40 <__aeabi_dsub+0x300>
 8000d56:	2200      	movs	r2, #0
 8000d58:	2400      	movs	r4, #0
 8000d5a:	e617      	b.n	800098c <__aeabi_dsub+0x24c>
 8000d5c:	1a16      	subs	r6, r2, r0
 8000d5e:	4663      	mov	r3, ip
 8000d60:	42b2      	cmp	r2, r6
 8000d62:	4192      	sbcs	r2, r2
 8000d64:	1a59      	subs	r1, r3, r1
 8000d66:	4252      	negs	r2, r2
 8000d68:	1a89      	subs	r1, r1, r2
 8000d6a:	003d      	movs	r5, r7
 8000d6c:	e525      	b.n	80007ba <__aeabi_dsub+0x7a>
 8000d6e:	4661      	mov	r1, ip
 8000d70:	4691      	mov	r9, r2
 8000d72:	4d15      	ldr	r5, [pc, #84]	; (8000dc8 <__aeabi_dsub+0x688>)
 8000d74:	e601      	b.n	800097a <__aeabi_dsub+0x23a>
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	2400      	movs	r4, #0
 8000d7a:	0312      	lsls	r2, r2, #12
 8000d7c:	e679      	b.n	8000a72 <__aeabi_dsub+0x332>
 8000d7e:	001d      	movs	r5, r3
 8000d80:	000e      	movs	r6, r1
 8000d82:	3d20      	subs	r5, #32
 8000d84:	40ee      	lsrs	r6, r5
 8000d86:	46b0      	mov	r8, r6
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	d004      	beq.n	8000d96 <__aeabi_dsub+0x656>
 8000d8c:	2540      	movs	r5, #64	; 0x40
 8000d8e:	1aeb      	subs	r3, r5, r3
 8000d90:	4099      	lsls	r1, r3
 8000d92:	4308      	orrs	r0, r1
 8000d94:	4681      	mov	r9, r0
 8000d96:	464e      	mov	r6, r9
 8000d98:	4643      	mov	r3, r8
 8000d9a:	1e71      	subs	r1, r6, #1
 8000d9c:	418e      	sbcs	r6, r1
 8000d9e:	431e      	orrs	r6, r3
 8000da0:	e767      	b.n	8000c72 <__aeabi_dsub+0x532>
 8000da2:	1886      	adds	r6, r0, r2
 8000da4:	4296      	cmp	r6, r2
 8000da6:	419b      	sbcs	r3, r3
 8000da8:	4461      	add	r1, ip
 8000daa:	425b      	negs	r3, r3
 8000dac:	18c9      	adds	r1, r1, r3
 8000dae:	003d      	movs	r5, r7
 8000db0:	e58c      	b.n	80008cc <__aeabi_dsub+0x18c>
 8000db2:	4647      	mov	r7, r8
 8000db4:	4337      	orrs	r7, r6
 8000db6:	d0ce      	beq.n	8000d56 <__aeabi_dsub+0x616>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4641      	mov	r1, r8
 8000dbc:	4032      	ands	r2, r6
 8000dbe:	e649      	b.n	8000a54 <__aeabi_dsub+0x314>
 8000dc0:	2700      	movs	r7, #0
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	e5e6      	b.n	8000994 <__aeabi_dsub+0x254>
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	000007ff 	.word	0x000007ff
 8000dcc:	ff7fffff 	.word	0xff7fffff

08000dd0 <__aeabi_d2iz>:
 8000dd0:	b530      	push	{r4, r5, lr}
 8000dd2:	4d14      	ldr	r5, [pc, #80]	; (8000e24 <__aeabi_d2iz+0x54>)
 8000dd4:	030a      	lsls	r2, r1, #12
 8000dd6:	004b      	lsls	r3, r1, #1
 8000dd8:	0b12      	lsrs	r2, r2, #12
 8000dda:	0d5b      	lsrs	r3, r3, #21
 8000ddc:	0fc9      	lsrs	r1, r1, #31
 8000dde:	2400      	movs	r4, #0
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	dd11      	ble.n	8000e08 <__aeabi_d2iz+0x38>
 8000de4:	4c10      	ldr	r4, [pc, #64]	; (8000e28 <__aeabi_d2iz+0x58>)
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	dc10      	bgt.n	8000e0c <__aeabi_d2iz+0x3c>
 8000dea:	2480      	movs	r4, #128	; 0x80
 8000dec:	0364      	lsls	r4, r4, #13
 8000dee:	4322      	orrs	r2, r4
 8000df0:	4c0e      	ldr	r4, [pc, #56]	; (8000e2c <__aeabi_d2iz+0x5c>)
 8000df2:	1ae4      	subs	r4, r4, r3
 8000df4:	2c1f      	cmp	r4, #31
 8000df6:	dd0c      	ble.n	8000e12 <__aeabi_d2iz+0x42>
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <__aeabi_d2iz+0x60>)
 8000dfa:	1ac3      	subs	r3, r0, r3
 8000dfc:	40da      	lsrs	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	425c      	negs	r4, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_d2iz+0x38>
 8000e06:	001c      	movs	r4, r3
 8000e08:	0020      	movs	r0, r4
 8000e0a:	bd30      	pop	{r4, r5, pc}
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <__aeabi_d2iz+0x64>)
 8000e0e:	18cc      	adds	r4, r1, r3
 8000e10:	e7fa      	b.n	8000e08 <__aeabi_d2iz+0x38>
 8000e12:	4d09      	ldr	r5, [pc, #36]	; (8000e38 <__aeabi_d2iz+0x68>)
 8000e14:	40e0      	lsrs	r0, r4
 8000e16:	46ac      	mov	ip, r5
 8000e18:	4463      	add	r3, ip
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	4303      	orrs	r3, r0
 8000e20:	e7ee      	b.n	8000e00 <__aeabi_d2iz+0x30>
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	000003fe 	.word	0x000003fe
 8000e28:	0000041d 	.word	0x0000041d
 8000e2c:	00000433 	.word	0x00000433
 8000e30:	00000413 	.word	0x00000413
 8000e34:	7fffffff 	.word	0x7fffffff
 8000e38:	fffffbed 	.word	0xfffffbed

08000e3c <__aeabi_i2d>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d02d      	beq.n	8000e9e <__aeabi_i2d+0x62>
 8000e42:	17c3      	asrs	r3, r0, #31
 8000e44:	18c5      	adds	r5, r0, r3
 8000e46:	405d      	eors	r5, r3
 8000e48:	0fc4      	lsrs	r4, r0, #31
 8000e4a:	0028      	movs	r0, r5
 8000e4c:	f000 f86e 	bl	8000f2c <__clzsi2>
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <__aeabi_i2d+0x6c>)
 8000e52:	1a1b      	subs	r3, r3, r0
 8000e54:	055b      	lsls	r3, r3, #21
 8000e56:	0d5b      	lsrs	r3, r3, #21
 8000e58:	280a      	cmp	r0, #10
 8000e5a:	dd15      	ble.n	8000e88 <__aeabi_i2d+0x4c>
 8000e5c:	380b      	subs	r0, #11
 8000e5e:	4085      	lsls	r5, r0
 8000e60:	2200      	movs	r2, #0
 8000e62:	032d      	lsls	r5, r5, #12
 8000e64:	0b2d      	lsrs	r5, r5, #12
 8000e66:	2100      	movs	r1, #0
 8000e68:	0010      	movs	r0, r2
 8000e6a:	032d      	lsls	r5, r5, #12
 8000e6c:	0d0a      	lsrs	r2, r1, #20
 8000e6e:	0b2d      	lsrs	r5, r5, #12
 8000e70:	0512      	lsls	r2, r2, #20
 8000e72:	432a      	orrs	r2, r5
 8000e74:	4d0d      	ldr	r5, [pc, #52]	; (8000eac <__aeabi_i2d+0x70>)
 8000e76:	051b      	lsls	r3, r3, #20
 8000e78:	402a      	ands	r2, r5
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	07e4      	lsls	r4, r4, #31
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0019      	movs	r1, r3
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	0002      	movs	r2, r0
 8000e8a:	0029      	movs	r1, r5
 8000e8c:	3215      	adds	r2, #21
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	000a      	movs	r2, r1
 8000e92:	210b      	movs	r1, #11
 8000e94:	1a08      	subs	r0, r1, r0
 8000e96:	40c5      	lsrs	r5, r0
 8000e98:	032d      	lsls	r5, r5, #12
 8000e9a:	0b2d      	lsrs	r5, r5, #12
 8000e9c:	e7e3      	b.n	8000e66 <__aeabi_i2d+0x2a>
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e7de      	b.n	8000e66 <__aeabi_i2d+0x2a>
 8000ea8:	0000041e 	.word	0x0000041e
 8000eac:	800fffff 	.word	0x800fffff

08000eb0 <__aeabi_cdrcmple>:
 8000eb0:	4684      	mov	ip, r0
 8000eb2:	1c10      	adds	r0, r2, #0
 8000eb4:	4662      	mov	r2, ip
 8000eb6:	468c      	mov	ip, r1
 8000eb8:	1c19      	adds	r1, r3, #0
 8000eba:	4663      	mov	r3, ip
 8000ebc:	e000      	b.n	8000ec0 <__aeabi_cdcmpeq>
 8000ebe:	46c0      	nop			; (mov r8, r8)

08000ec0 <__aeabi_cdcmpeq>:
 8000ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ec2:	f000 f8f1 	bl	80010a8 <__ledf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d401      	bmi.n	8000ece <__aeabi_cdcmpeq+0xe>
 8000eca:	2100      	movs	r1, #0
 8000ecc:	42c8      	cmn	r0, r1
 8000ece:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ed0 <__aeabi_dcmpeq>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	f000 f849 	bl	8000f68 <__eqdf2>
 8000ed6:	4240      	negs	r0, r0
 8000ed8:	3001      	adds	r0, #1
 8000eda:	bd10      	pop	{r4, pc}

08000edc <__aeabi_dcmplt>:
 8000edc:	b510      	push	{r4, lr}
 8000ede:	f000 f8e3 	bl	80010a8 <__ledf2>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	db01      	blt.n	8000eea <__aeabi_dcmplt+0xe>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	2001      	movs	r0, #1
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)

08000ef0 <__aeabi_dcmple>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	f000 f8d9 	bl	80010a8 <__ledf2>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	dd01      	ble.n	8000efe <__aeabi_dcmple+0xe>
 8000efa:	2000      	movs	r0, #0
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	2001      	movs	r0, #1
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)

08000f04 <__aeabi_dcmpgt>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	f000 f86b 	bl	8000fe0 <__gedf2>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	dc01      	bgt.n	8000f12 <__aeabi_dcmpgt+0xe>
 8000f0e:	2000      	movs	r0, #0
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	2001      	movs	r0, #1
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)

08000f18 <__aeabi_dcmpge>:
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	f000 f861 	bl	8000fe0 <__gedf2>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	da01      	bge.n	8000f26 <__aeabi_dcmpge+0xe>
 8000f22:	2000      	movs	r0, #0
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	2001      	movs	r0, #1
 8000f28:	bd10      	pop	{r4, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)

08000f2c <__clzsi2>:
 8000f2c:	211c      	movs	r1, #28
 8000f2e:	2301      	movs	r3, #1
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d301      	bcc.n	8000f3a <__clzsi2+0xe>
 8000f36:	0c00      	lsrs	r0, r0, #16
 8000f38:	3910      	subs	r1, #16
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	4298      	cmp	r0, r3
 8000f3e:	d301      	bcc.n	8000f44 <__clzsi2+0x18>
 8000f40:	0a00      	lsrs	r0, r0, #8
 8000f42:	3908      	subs	r1, #8
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d301      	bcc.n	8000f4e <__clzsi2+0x22>
 8000f4a:	0900      	lsrs	r0, r0, #4
 8000f4c:	3904      	subs	r1, #4
 8000f4e:	a202      	add	r2, pc, #8	; (adr r2, 8000f58 <__clzsi2+0x2c>)
 8000f50:	5c10      	ldrb	r0, [r2, r0]
 8000f52:	1840      	adds	r0, r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	02020304 	.word	0x02020304
 8000f5c:	01010101 	.word	0x01010101
	...

08000f68 <__eqdf2>:
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	464f      	mov	r7, r9
 8000f6c:	4646      	mov	r6, r8
 8000f6e:	46d6      	mov	lr, sl
 8000f70:	4684      	mov	ip, r0
 8000f72:	b5c0      	push	{r6, r7, lr}
 8000f74:	4680      	mov	r8, r0
 8000f76:	4e19      	ldr	r6, [pc, #100]	; (8000fdc <__eqdf2+0x74>)
 8000f78:	0318      	lsls	r0, r3, #12
 8000f7a:	030f      	lsls	r7, r1, #12
 8000f7c:	004d      	lsls	r5, r1, #1
 8000f7e:	0b00      	lsrs	r0, r0, #12
 8000f80:	005c      	lsls	r4, r3, #1
 8000f82:	4682      	mov	sl, r0
 8000f84:	0b3f      	lsrs	r7, r7, #12
 8000f86:	0d6d      	lsrs	r5, r5, #21
 8000f88:	0fc9      	lsrs	r1, r1, #31
 8000f8a:	4691      	mov	r9, r2
 8000f8c:	0d64      	lsrs	r4, r4, #21
 8000f8e:	0fdb      	lsrs	r3, r3, #31
 8000f90:	2001      	movs	r0, #1
 8000f92:	42b5      	cmp	r5, r6
 8000f94:	d00a      	beq.n	8000fac <__eqdf2+0x44>
 8000f96:	42b4      	cmp	r4, r6
 8000f98:	d003      	beq.n	8000fa2 <__eqdf2+0x3a>
 8000f9a:	42a5      	cmp	r5, r4
 8000f9c:	d101      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000f9e:	4557      	cmp	r7, sl
 8000fa0:	d00c      	beq.n	8000fbc <__eqdf2+0x54>
 8000fa2:	bc1c      	pop	{r2, r3, r4}
 8000fa4:	4690      	mov	r8, r2
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	46a2      	mov	sl, r4
 8000faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fac:	4666      	mov	r6, ip
 8000fae:	433e      	orrs	r6, r7
 8000fb0:	d1f7      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fb2:	42ac      	cmp	r4, r5
 8000fb4:	d1f5      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fb6:	4654      	mov	r4, sl
 8000fb8:	4314      	orrs	r4, r2
 8000fba:	d1f2      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d1ef      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fc2:	4299      	cmp	r1, r3
 8000fc4:	d007      	beq.n	8000fd6 <__eqdf2+0x6e>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d1eb      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fca:	4663      	mov	r3, ip
 8000fcc:	431f      	orrs	r7, r3
 8000fce:	0038      	movs	r0, r7
 8000fd0:	1e47      	subs	r7, r0, #1
 8000fd2:	41b8      	sbcs	r0, r7
 8000fd4:	e7e5      	b.n	8000fa2 <__eqdf2+0x3a>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e7e3      	b.n	8000fa2 <__eqdf2+0x3a>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	000007ff 	.word	0x000007ff

08000fe0 <__gedf2>:
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	464f      	mov	r7, r9
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	004d      	lsls	r5, r1, #1
 8000fea:	b5c0      	push	{r6, r7, lr}
 8000fec:	030e      	lsls	r6, r1, #12
 8000fee:	0fc9      	lsrs	r1, r1, #31
 8000ff0:	468a      	mov	sl, r1
 8000ff2:	492c      	ldr	r1, [pc, #176]	; (80010a4 <__gedf2+0xc4>)
 8000ff4:	031f      	lsls	r7, r3, #12
 8000ff6:	005c      	lsls	r4, r3, #1
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	0b36      	lsrs	r6, r6, #12
 8000ffc:	0d6d      	lsrs	r5, r5, #21
 8000ffe:	4691      	mov	r9, r2
 8001000:	0b3f      	lsrs	r7, r7, #12
 8001002:	0d64      	lsrs	r4, r4, #21
 8001004:	0fdb      	lsrs	r3, r3, #31
 8001006:	428d      	cmp	r5, r1
 8001008:	d01e      	beq.n	8001048 <__gedf2+0x68>
 800100a:	428c      	cmp	r4, r1
 800100c:	d016      	beq.n	800103c <__gedf2+0x5c>
 800100e:	2d00      	cmp	r5, #0
 8001010:	d11e      	bne.n	8001050 <__gedf2+0x70>
 8001012:	4330      	orrs	r0, r6
 8001014:	4684      	mov	ip, r0
 8001016:	2c00      	cmp	r4, #0
 8001018:	d101      	bne.n	800101e <__gedf2+0x3e>
 800101a:	433a      	orrs	r2, r7
 800101c:	d023      	beq.n	8001066 <__gedf2+0x86>
 800101e:	4662      	mov	r2, ip
 8001020:	2a00      	cmp	r2, #0
 8001022:	d01a      	beq.n	800105a <__gedf2+0x7a>
 8001024:	459a      	cmp	sl, r3
 8001026:	d029      	beq.n	800107c <__gedf2+0x9c>
 8001028:	4651      	mov	r1, sl
 800102a:	2002      	movs	r0, #2
 800102c:	3901      	subs	r1, #1
 800102e:	4008      	ands	r0, r1
 8001030:	3801      	subs	r0, #1
 8001032:	bc1c      	pop	{r2, r3, r4}
 8001034:	4690      	mov	r8, r2
 8001036:	4699      	mov	r9, r3
 8001038:	46a2      	mov	sl, r4
 800103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103c:	0039      	movs	r1, r7
 800103e:	4311      	orrs	r1, r2
 8001040:	d0e5      	beq.n	800100e <__gedf2+0x2e>
 8001042:	2002      	movs	r0, #2
 8001044:	4240      	negs	r0, r0
 8001046:	e7f4      	b.n	8001032 <__gedf2+0x52>
 8001048:	4330      	orrs	r0, r6
 800104a:	d1fa      	bne.n	8001042 <__gedf2+0x62>
 800104c:	42ac      	cmp	r4, r5
 800104e:	d00f      	beq.n	8001070 <__gedf2+0x90>
 8001050:	2c00      	cmp	r4, #0
 8001052:	d10f      	bne.n	8001074 <__gedf2+0x94>
 8001054:	433a      	orrs	r2, r7
 8001056:	d0e7      	beq.n	8001028 <__gedf2+0x48>
 8001058:	e00c      	b.n	8001074 <__gedf2+0x94>
 800105a:	2201      	movs	r2, #1
 800105c:	3b01      	subs	r3, #1
 800105e:	4393      	bics	r3, r2
 8001060:	0018      	movs	r0, r3
 8001062:	3001      	adds	r0, #1
 8001064:	e7e5      	b.n	8001032 <__gedf2+0x52>
 8001066:	4663      	mov	r3, ip
 8001068:	2000      	movs	r0, #0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0e1      	beq.n	8001032 <__gedf2+0x52>
 800106e:	e7db      	b.n	8001028 <__gedf2+0x48>
 8001070:	433a      	orrs	r2, r7
 8001072:	d1e6      	bne.n	8001042 <__gedf2+0x62>
 8001074:	459a      	cmp	sl, r3
 8001076:	d1d7      	bne.n	8001028 <__gedf2+0x48>
 8001078:	42a5      	cmp	r5, r4
 800107a:	dcd5      	bgt.n	8001028 <__gedf2+0x48>
 800107c:	42a5      	cmp	r5, r4
 800107e:	db05      	blt.n	800108c <__gedf2+0xac>
 8001080:	42be      	cmp	r6, r7
 8001082:	d8d1      	bhi.n	8001028 <__gedf2+0x48>
 8001084:	d008      	beq.n	8001098 <__gedf2+0xb8>
 8001086:	2000      	movs	r0, #0
 8001088:	42be      	cmp	r6, r7
 800108a:	d2d2      	bcs.n	8001032 <__gedf2+0x52>
 800108c:	4650      	mov	r0, sl
 800108e:	2301      	movs	r3, #1
 8001090:	3801      	subs	r0, #1
 8001092:	4398      	bics	r0, r3
 8001094:	3001      	adds	r0, #1
 8001096:	e7cc      	b.n	8001032 <__gedf2+0x52>
 8001098:	45c8      	cmp	r8, r9
 800109a:	d8c5      	bhi.n	8001028 <__gedf2+0x48>
 800109c:	2000      	movs	r0, #0
 800109e:	45c8      	cmp	r8, r9
 80010a0:	d3f4      	bcc.n	800108c <__gedf2+0xac>
 80010a2:	e7c6      	b.n	8001032 <__gedf2+0x52>
 80010a4:	000007ff 	.word	0x000007ff

080010a8 <__ledf2>:
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	464f      	mov	r7, r9
 80010ac:	4646      	mov	r6, r8
 80010ae:	46d6      	mov	lr, sl
 80010b0:	004d      	lsls	r5, r1, #1
 80010b2:	b5c0      	push	{r6, r7, lr}
 80010b4:	030e      	lsls	r6, r1, #12
 80010b6:	0fc9      	lsrs	r1, r1, #31
 80010b8:	468a      	mov	sl, r1
 80010ba:	492e      	ldr	r1, [pc, #184]	; (8001174 <__ledf2+0xcc>)
 80010bc:	031f      	lsls	r7, r3, #12
 80010be:	005c      	lsls	r4, r3, #1
 80010c0:	4680      	mov	r8, r0
 80010c2:	0b36      	lsrs	r6, r6, #12
 80010c4:	0d6d      	lsrs	r5, r5, #21
 80010c6:	4691      	mov	r9, r2
 80010c8:	0b3f      	lsrs	r7, r7, #12
 80010ca:	0d64      	lsrs	r4, r4, #21
 80010cc:	0fdb      	lsrs	r3, r3, #31
 80010ce:	428d      	cmp	r5, r1
 80010d0:	d018      	beq.n	8001104 <__ledf2+0x5c>
 80010d2:	428c      	cmp	r4, r1
 80010d4:	d011      	beq.n	80010fa <__ledf2+0x52>
 80010d6:	2d00      	cmp	r5, #0
 80010d8:	d118      	bne.n	800110c <__ledf2+0x64>
 80010da:	4330      	orrs	r0, r6
 80010dc:	4684      	mov	ip, r0
 80010de:	2c00      	cmp	r4, #0
 80010e0:	d11e      	bne.n	8001120 <__ledf2+0x78>
 80010e2:	433a      	orrs	r2, r7
 80010e4:	d11c      	bne.n	8001120 <__ledf2+0x78>
 80010e6:	4663      	mov	r3, ip
 80010e8:	2000      	movs	r0, #0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d030      	beq.n	8001150 <__ledf2+0xa8>
 80010ee:	4651      	mov	r1, sl
 80010f0:	2002      	movs	r0, #2
 80010f2:	3901      	subs	r1, #1
 80010f4:	4008      	ands	r0, r1
 80010f6:	3801      	subs	r0, #1
 80010f8:	e02a      	b.n	8001150 <__ledf2+0xa8>
 80010fa:	0039      	movs	r1, r7
 80010fc:	4311      	orrs	r1, r2
 80010fe:	d0ea      	beq.n	80010d6 <__ledf2+0x2e>
 8001100:	2002      	movs	r0, #2
 8001102:	e025      	b.n	8001150 <__ledf2+0xa8>
 8001104:	4330      	orrs	r0, r6
 8001106:	d1fb      	bne.n	8001100 <__ledf2+0x58>
 8001108:	42ac      	cmp	r4, r5
 800110a:	d026      	beq.n	800115a <__ledf2+0xb2>
 800110c:	2c00      	cmp	r4, #0
 800110e:	d126      	bne.n	800115e <__ledf2+0xb6>
 8001110:	433a      	orrs	r2, r7
 8001112:	d124      	bne.n	800115e <__ledf2+0xb6>
 8001114:	4651      	mov	r1, sl
 8001116:	2002      	movs	r0, #2
 8001118:	3901      	subs	r1, #1
 800111a:	4008      	ands	r0, r1
 800111c:	3801      	subs	r0, #1
 800111e:	e017      	b.n	8001150 <__ledf2+0xa8>
 8001120:	4662      	mov	r2, ip
 8001122:	2a00      	cmp	r2, #0
 8001124:	d00f      	beq.n	8001146 <__ledf2+0x9e>
 8001126:	459a      	cmp	sl, r3
 8001128:	d1e1      	bne.n	80010ee <__ledf2+0x46>
 800112a:	42a5      	cmp	r5, r4
 800112c:	db05      	blt.n	800113a <__ledf2+0x92>
 800112e:	42be      	cmp	r6, r7
 8001130:	d8dd      	bhi.n	80010ee <__ledf2+0x46>
 8001132:	d019      	beq.n	8001168 <__ledf2+0xc0>
 8001134:	2000      	movs	r0, #0
 8001136:	42be      	cmp	r6, r7
 8001138:	d20a      	bcs.n	8001150 <__ledf2+0xa8>
 800113a:	4650      	mov	r0, sl
 800113c:	2301      	movs	r3, #1
 800113e:	3801      	subs	r0, #1
 8001140:	4398      	bics	r0, r3
 8001142:	3001      	adds	r0, #1
 8001144:	e004      	b.n	8001150 <__ledf2+0xa8>
 8001146:	2201      	movs	r2, #1
 8001148:	3b01      	subs	r3, #1
 800114a:	4393      	bics	r3, r2
 800114c:	0018      	movs	r0, r3
 800114e:	3001      	adds	r0, #1
 8001150:	bc1c      	pop	{r2, r3, r4}
 8001152:	4690      	mov	r8, r2
 8001154:	4699      	mov	r9, r3
 8001156:	46a2      	mov	sl, r4
 8001158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115a:	433a      	orrs	r2, r7
 800115c:	d1d0      	bne.n	8001100 <__ledf2+0x58>
 800115e:	459a      	cmp	sl, r3
 8001160:	d1c5      	bne.n	80010ee <__ledf2+0x46>
 8001162:	42a5      	cmp	r5, r4
 8001164:	dcc3      	bgt.n	80010ee <__ledf2+0x46>
 8001166:	e7e0      	b.n	800112a <__ledf2+0x82>
 8001168:	45c8      	cmp	r8, r9
 800116a:	d8c0      	bhi.n	80010ee <__ledf2+0x46>
 800116c:	2000      	movs	r0, #0
 800116e:	45c8      	cmp	r8, r9
 8001170:	d3e3      	bcc.n	800113a <__ledf2+0x92>
 8001172:	e7ed      	b.n	8001150 <__ledf2+0xa8>
 8001174:	000007ff 	.word	0x000007ff

08001178 <ReadTemperature>:
 * 			 and pass the appropriate SPI handle structure
 *
 * @Retval:  Temp_status value is returned
 *************************************************************/
Temp_status ReadTemperature(uint16_t *temp)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	uint8_t Temp_buf[5] = {"\0"};
 8001180:	2408      	movs	r4, #8
 8001182:	193b      	adds	r3, r7, r4
 8001184:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <ReadTemperature+0x130>)
 8001186:	8812      	ldrh	r2, [r2, #0]
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	2202      	movs	r2, #2
 800118c:	189b      	adds	r3, r3, r2
 800118e:	2203      	movs	r2, #3
 8001190:	2100      	movs	r1, #0
 8001192:	0018      	movs	r0, r3
 8001194:	f002 fdc4 	bl	8003d20 <memset>
//	uint8_t temp_buff_1[5] = {"\0"};
	Temp_status status = TEMP_OK;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_WritePin(K_SEL_GPIO_Port, K_SEL_Pin, RESET);
//	HAL_GPIO_WritePin(CS_pin_GPIO_Port, CS_pin_Pin, SET);
// 	HAL_GPIO_WritePin(CS_pin_GPIO_Port, CS_pin_Pin, RESET);

//	HAL_Delay(50);
	memset(temp, 0, sizeof(&temp));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2204      	movs	r2, #4
 80011a4:	2100      	movs	r1, #0
 80011a6:	0018      	movs	r0, r3
 80011a8:	f002 fdba 	bl	8003d20 <memset>
//	temp = 0;
	memset(Temp_buf, 0, sizeof(Temp_buf));
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	2205      	movs	r2, #5
 80011b0:	2100      	movs	r1, #0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f002 fdb4 	bl	8003d20 <memset>
	/*Check*/

//	HAL_GPIO_WritePin(CS_pin_GPIO_Port, CS_pin_Pin, RESET);
//    HAL_Delay(50);
	HAL_SPI_Receive(&hspi1,Temp_buf,sizeof(Temp_buf),HAL_MAX_DELAY);
 80011b8:	2301      	movs	r3, #1
 80011ba:	425b      	negs	r3, r3
 80011bc:	1939      	adds	r1, r7, r4
 80011be:	483b      	ldr	r0, [pc, #236]	; (80012ac <ReadTemperature+0x134>)
 80011c0:	2205      	movs	r2, #5
 80011c2:	f001 fc89 	bl	8002ad8 <HAL_SPI_Receive>

//	HAL_GPIO_WritePin(CS_pin_GPIO_Port, CS_pin_Pin, SET);
	HAL_Delay(50);
 80011c6:	2032      	movs	r0, #50	; 0x32
 80011c8:	f000 fc4c 	bl	8001a64 <HAL_Delay>
	*temp = Temp_buf[0] << 8;
 80011cc:	0020      	movs	r0, r4
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	0212      	lsls	r2, r2, #8
 80011d8:	b292      	uxth	r2, r2
 80011da:	801a      	strh	r2, [r3, #0]

	*temp |= Temp_buf[1];
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	8819      	ldrh	r1, [r3, #0]
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	b292      	uxth	r2, r2
 80011ec:	801a      	strh	r2, [r3, #0]

//   HAL_GPIO_WritePin(CS_pin_GPIO_Port, CS_pin_Pin, SET);

	if(*temp & 0x1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	001a      	movs	r2, r3
 80011f4:	2301      	movs	r3, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	d02a      	beq.n	8001250 <ReadTemperature+0xd8>
	{
		if(Temp_buf[3] & 0x1) /*Check to see if thermocouple is open*/
 80011fa:	2308      	movs	r3, #8
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	78db      	ldrb	r3, [r3, #3]
 8001200:	001a      	movs	r2, r3
 8001202:	2301      	movs	r3, #1
 8001204:	4013      	ands	r3, r2
 8001206:	d004      	beq.n	8001212 <ReadTemperature+0x9a>
		{
			status = TEMP_OC_FAULT;
 8001208:	230f      	movs	r3, #15
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	2203      	movs	r2, #3
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e016      	b.n	8001240 <ReadTemperature+0xc8>
		}
		else if(Temp_buf[3] & 0x2) /*Check to see if thermocouple is short circuited to GND*/
 8001212:	2308      	movs	r3, #8
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	78db      	ldrb	r3, [r3, #3]
 8001218:	001a      	movs	r2, r3
 800121a:	2302      	movs	r3, #2
 800121c:	4013      	ands	r3, r2
 800121e:	d004      	beq.n	800122a <ReadTemperature+0xb2>
		{
			status = TEMP_SCG_FAULT;
 8001220:	230f      	movs	r3, #15
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2202      	movs	r2, #2
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	e00a      	b.n	8001240 <ReadTemperature+0xc8>
		}
		else if(Temp_buf[3] & 0x4)/*Check to see if thermocouple is short circuited to VCC*/
 800122a:	2308      	movs	r3, #8
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	001a      	movs	r2, r3
 8001232:	2304      	movs	r3, #4
 8001234:	4013      	ands	r3, r2
 8001236:	d003      	beq.n	8001240 <ReadTemperature+0xc8>
		{
			status = TEMP_SCV_FAULT;
 8001238:	230f      	movs	r3, #15
 800123a:	18fb      	adds	r3, r7, r3
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
		}
		*temp = pTemp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <ReadTemperature+0x138>)
 8001244:	8812      	ldrh	r2, [r2, #0]
 8001246:	801a      	strh	r2, [r3, #0]
		return status;
 8001248:	230f      	movs	r3, #15
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	e027      	b.n	80012a0 <ReadTemperature+0x128>
	}
	else
	{

		*temp >>= 2;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	881a      	ldrh	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	0892      	lsrs	r2, r2, #2
 8001258:	b292      	uxth	r2, r2
 800125a:	801a      	strh	r2, [r3, #0]
		*temp *= 0.25; /*Temperature Resolution Calculation*/
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff fdeb 	bl	8000e3c <__aeabi_i2d>
 8001266:	2200      	movs	r2, #0
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <ReadTemperature+0x13c>)
 800126a:	f7fe fff7 	bl	800025c <__aeabi_dmul>
 800126e:	0003      	movs	r3, r0
 8001270:	000c      	movs	r4, r1
 8001272:	001a      	movs	r2, r3
 8001274:	0023      	movs	r3, r4
 8001276:	687c      	ldr	r4, [r7, #4]
 8001278:	0010      	movs	r0, r2
 800127a:	0019      	movs	r1, r3
 800127c:	f7fe ffd0 	bl	8000220 <__aeabi_d2uiz>
 8001280:	0003      	movs	r3, r0
 8001282:	b29b      	uxth	r3, r3
 8001284:	8023      	strh	r3, [r4, #0]

		pTemp = *temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <ReadTemperature+0x138>)
 800128c:	801a      	strh	r2, [r3, #0]
		k1_flag=0;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <ReadTemperature+0x140>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
		k2_flag=1;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <ReadTemperature+0x144>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
		//return pTemp;
	}
//	return pTemp;
	return status; /*Return the Status of the thermocouple*/
 800129a:	230f      	movs	r3, #15
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	781b      	ldrb	r3, [r3, #0]
////	return pTemp_k1;
//	return status_k1; /*Return the Status of the thermocouple*/
//}
//return status;
//return status_k1;
}
 80012a0:	0018      	movs	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b005      	add	sp, #20
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	08003d48 	.word	0x08003d48
 80012ac:	20000198 	.word	0x20000198
 80012b0:	20000044 	.word	0x20000044
 80012b4:	3fd00000 	.word	0x3fd00000
 80012b8:	20000031 	.word	0x20000031
 80012bc:	20000030 	.word	0x20000030

080012c0 <read_temp>:
	//    ReadTemperature(&tempk1);
	    HAL_Delay(500);
	//    HAL_GPIO_WritePin(CS_pin_GPIO_Port, CS_pin_Pin, SET);
}
uint16_t read_temp(uint8_t Temp_no)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	0002      	movs	r2, r0
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	701a      	strb	r2, [r3, #0]
	uint16_t temp_value = 0;
 80012cc:	230e      	movs	r3, #14
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	801a      	strh	r2, [r3, #0]
//	temp = 0, temp1  = 0;
	if(Temp_no == 1)
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d109      	bne.n	80012f0 <read_temp+0x30>
	{
//		HAL_GPIO_WritePin(K_SEL_GPIO_Port, K_SEL_Pin, RESET);
//		HAL_Delay(500);
//	   	HAL_GPIO_WritePin(CS_pin_GPIO_Port, CS_pin_Pin, RESET);
		ReadTemperature(&temp_val);
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <read_temp+0x58>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff ff4a 	bl	8001178 <ReadTemperature>
		temp_value = temp_val;
 80012e4:	230e      	movs	r3, #14
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <read_temp+0x58>)
 80012ea:	8812      	ldrh	r2, [r2, #0]
 80012ec:	801a      	strh	r2, [r3, #0]
 80012ee:	e00c      	b.n	800130a <read_temp+0x4a>
	}
	else if(Temp_no == 2)
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d108      	bne.n	800130a <read_temp+0x4a>
	{
//		HAL_GPIO_WritePin(K_SEL_GPIO_Port, K_SEL_Pin, SET);
//		HAL_Delay(500);
//	   	HAL_GPIO_WritePin(CS2_p_GPIO_Port, CS2_p_Pin, RESET);
		ReadTemperature(&temp_val1);
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <read_temp+0x5c>)
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff ff3c 	bl	8001178 <ReadTemperature>
		temp_value = temp_val1;
 8001300:	230e      	movs	r3, #14
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <read_temp+0x5c>)
 8001306:	8812      	ldrh	r2, [r2, #0]
 8001308:	801a      	strh	r2, [r3, #0]
	}
	return temp_value;
 800130a:	230e      	movs	r3, #14
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	881b      	ldrh	r3, [r3, #0]
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000048 	.word	0x20000048
 800131c:	200001fc 	.word	0x200001fc

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fb3a 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f85c 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 f95c 	bl	80015e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001330:	f000 f92a 	bl	8001588 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001334:	f000 f8b8 	bl	80014a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001338:	f000 f8f6 	bl	8001528 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Init(&hspi1);
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <main+0xa8>)
 800133e:	0018      	movs	r0, r3
 8001340:	f001 fb30 	bl	80029a4 <HAL_SPI_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(CS_T2_GPIO_Port, CS_T2_Pin, SET);
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4820      	ldr	r0, [pc, #128]	; (80013cc <main+0xac>)
 800134a:	2201      	movs	r2, #1
 800134c:	0019      	movs	r1, r3
 800134e:	f000 fdcf 	bl	8001ef0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CS_T1_GPIO_Port, CS_T1_Pin, RESET);
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <main+0xb0>)
 8001354:	2200      	movs	r2, #0
 8001356:	2101      	movs	r1, #1
 8001358:	0018      	movs	r0, r3
 800135a:	f000 fdc9 	bl	8001ef0 <HAL_GPIO_WritePin>
	  Temperature1 = read_temp(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f7ff ffae 	bl	80012c0 <read_temp>
 8001364:	0003      	movs	r3, r0
 8001366:	001a      	movs	r2, r3
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <main+0xb4>)
 800136a:	801a      	strh	r2, [r3, #0]
	//  HAL_UART_Transmit(&huart2, (uint8_t *)data_1, sizeof(data_1), HAL_MAX_DELAY);
	 // HAL_UART_Transmit(&huart2, Temperature1, 1 , HAL_MAX_DELAY);
//	  sprintf(printBuff, " \r\n",Temperature1);
//	  HAL_UART_Transmit(&huart2, (uint16_t *)&printBuff, sizeof(printBuff), 1000);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)data_2, sizeof(data_2), HAL_MAX_DELAY);
	  HAL_Delay(500);
 800136c:	23fa      	movs	r3, #250	; 0xfa
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	0018      	movs	r0, r3
 8001372:	f000 fb77 	bl	8001a64 <HAL_Delay>

	  HAL_GPIO_WritePin(CS_T1_GPIO_Port, CS_T1_Pin, SET);
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <main+0xb0>)
 8001378:	2201      	movs	r2, #1
 800137a:	2101      	movs	r1, #1
 800137c:	0018      	movs	r0, r3
 800137e:	f000 fdb7 	bl	8001ef0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CS_T2_GPIO_Port, CS_T2_Pin, RESET);
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <main+0xac>)
 8001388:	2200      	movs	r2, #0
 800138a:	0019      	movs	r1, r3
 800138c:	f000 fdb0 	bl	8001ef0 <HAL_GPIO_WritePin>
	  Temperature2 = read_temp(2);
 8001390:	2002      	movs	r0, #2
 8001392:	f7ff ff95 	bl	80012c0 <read_temp>
 8001396:	0003      	movs	r3, r0
 8001398:	001a      	movs	r2, r3
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <main+0xb8>)
 800139c:	801a      	strh	r2, [r3, #0]
	//  HAL_UART_Transmit(&huart2, Temperature2, 2, HAL_MAX_DELAY);
	 // HAL_UART_Transmit(&huart2, (uint8_t *)data_3, sizeof(data_3), HAL_MAX_DELAY);
data[1]=Temperature1;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <main+0xb4>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <main+0xbc>)
 80013a8:	705a      	strb	r2, [r3, #1]
data[3]=Temperature2;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <main+0xb8>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <main+0xbc>)
 80013b4:	70da      	strb	r2, [r3, #3]
HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), HAL_MAX_DELAY);
 80013b6:	2301      	movs	r3, #1
 80013b8:	425b      	negs	r3, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <main+0xbc>)
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <main+0xc0>)
 80013be:	2205      	movs	r2, #5
 80013c0:	f002 f8e4 	bl	800358c <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(CS_T2_GPIO_Port, CS_T2_Pin, SET);
 80013c4:	e7be      	b.n	8001344 <main+0x24>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	20000198 	.word	0x20000198
 80013cc:	48000800 	.word	0x48000800
 80013d0:	48000400 	.word	0x48000400
 80013d4:	20000348 	.word	0x20000348
 80013d8:	20000114 	.word	0x20000114
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000118 	.word	0x20000118

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b095      	sub	sp, #84	; 0x54
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	2420      	movs	r4, #32
 80013ec:	193b      	adds	r3, r7, r4
 80013ee:	0018      	movs	r0, r3
 80013f0:	2330      	movs	r3, #48	; 0x30
 80013f2:	001a      	movs	r2, r3
 80013f4:	2100      	movs	r1, #0
 80013f6:	f002 fc93 	bl	8003d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fa:	2310      	movs	r3, #16
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	0018      	movs	r0, r3
 8001400:	2310      	movs	r3, #16
 8001402:	001a      	movs	r2, r3
 8001404:	2100      	movs	r1, #0
 8001406:	f002 fc8b 	bl	8003d20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800140a:	003b      	movs	r3, r7
 800140c:	0018      	movs	r0, r3
 800140e:	2310      	movs	r3, #16
 8001410:	001a      	movs	r2, r3
 8001412:	2100      	movs	r1, #0
 8001414:	f002 fc84 	bl	8003d20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001418:	0021      	movs	r1, r4
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2202      	movs	r2, #2
 800141e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2201      	movs	r2, #1
 8001424:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2210      	movs	r2, #16
 800142a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2202      	movs	r2, #2
 8001430:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	22a0      	movs	r2, #160	; 0xa0
 800143c:	0392      	lsls	r2, r2, #14
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2200      	movs	r2, #0
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	187b      	adds	r3, r7, r1
 8001448:	0018      	movs	r0, r3
 800144a:	f000 fd6f 	bl	8001f2c <HAL_RCC_OscConfig>
 800144e:	1e03      	subs	r3, r0, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001452:	f000 f95d 	bl	8001710 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	2110      	movs	r1, #16
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2207      	movs	r2, #7
 800145c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2202      	movs	r2, #2
 8001462:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2101      	movs	r1, #1
 8001474:	0018      	movs	r0, r3
 8001476:	f001 f875 	bl	8002564 <HAL_RCC_ClockConfig>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800147e:	f000 f947 	bl	8001710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001482:	003b      	movs	r3, r7
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001488:	003b      	movs	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148e:	003b      	movs	r3, r7
 8001490:	0018      	movs	r0, r3
 8001492:	f001 f9b9 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800149a:	f000 f939 	bl	8001710 <Error_Handler>
  }
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b015      	add	sp, #84	; 0x54
 80014a4:	bd90      	pop	{r4, r7, pc}
	...

080014a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_SPI1_Init+0x78>)
 80014ae:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <MX_SPI1_Init+0x7c>)
 80014b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_SPI1_Init+0x78>)
 80014b4:	2282      	movs	r2, #130	; 0x82
 80014b6:	0052      	lsls	r2, r2, #1
 80014b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_SPI1_Init+0x78>)
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	00d2      	lsls	r2, r2, #3
 80014c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_SPI1_Init+0x78>)
 80014c4:	22e0      	movs	r2, #224	; 0xe0
 80014c6:	00d2      	lsls	r2, r2, #3
 80014c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_SPI1_Init+0x78>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_SPI1_Init+0x78>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_SPI1_Init+0x78>)
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_SPI1_Init+0x78>)
 80014e0:	2218      	movs	r2, #24
 80014e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_SPI1_Init+0x78>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <MX_SPI1_Init+0x78>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_SPI1_Init+0x78>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_SPI1_Init+0x78>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_SPI1_Init+0x78>)
 80014fe:	2200      	movs	r2, #0
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_SPI1_Init+0x78>)
 8001504:	2208      	movs	r2, #8
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <MX_SPI1_Init+0x78>)
 800150a:	0018      	movs	r0, r3
 800150c:	f001 fa4a 	bl	80029a4 <HAL_SPI_Init>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d001      	beq.n	8001518 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001514:	f000 f8fc 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000198 	.word	0x20000198
 8001524:	40013000 	.word	0x40013000

08001528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_USART1_UART_Init+0x58>)
 800152e:	4a15      	ldr	r2, [pc, #84]	; (8001584 <MX_USART1_UART_Init+0x5c>)
 8001530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_USART1_UART_Init+0x58>)
 8001534:	22e1      	movs	r2, #225	; 0xe1
 8001536:	0252      	lsls	r2, r2, #9
 8001538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART1_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_USART1_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART1_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART1_UART_Init+0x58>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART1_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART1_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART1_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART1_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <MX_USART1_UART_Init+0x58>)
 800156c:	0018      	movs	r0, r3
 800156e:	f001 ffb9 	bl	80034e4 <HAL_UART_Init>
 8001572:	1e03      	subs	r3, r0, #0
 8001574:	d001      	beq.n	800157a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001576:	f000 f8cb 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000118 	.word	0x20000118
 8001584:	40013800 	.word	0x40013800

08001588 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <MX_USART2_UART_Init+0x5c>)
 8001590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 8001594:	22e1      	movs	r2, #225	; 0xe1
 8001596:	0252      	lsls	r2, r2, #9
 8001598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <MX_USART2_UART_Init+0x58>)
 80015cc:	0018      	movs	r0, r3
 80015ce:	f001 ff89 	bl	80034e4 <HAL_UART_Init>
 80015d2:	1e03      	subs	r3, r0, #0
 80015d4:	d001      	beq.n	80015da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015d6:	f000 f89b 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000200 	.word	0x20000200
 80015e4:	40004400 	.word	0x40004400

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b08b      	sub	sp, #44	; 0x2c
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	2414      	movs	r4, #20
 80015f0:	193b      	adds	r3, r7, r4
 80015f2:	0018      	movs	r0, r3
 80015f4:	2314      	movs	r3, #20
 80015f6:	001a      	movs	r2, r3
 80015f8:	2100      	movs	r1, #0
 80015fa:	f002 fb91 	bl	8003d20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <MX_GPIO_Init+0x118>)
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <MX_GPIO_Init+0x118>)
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	0309      	lsls	r1, r1, #12
 8001608:	430a      	orrs	r2, r1
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <MX_GPIO_Init+0x118>)
 800160e:	695a      	ldr	r2, [r3, #20]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	031b      	lsls	r3, r3, #12
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <MX_GPIO_Init+0x118>)
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <MX_GPIO_Init+0x118>)
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	03c9      	lsls	r1, r1, #15
 8001624:	430a      	orrs	r2, r1
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <MX_GPIO_Init+0x118>)
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	03db      	lsls	r3, r3, #15
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <MX_GPIO_Init+0x118>)
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <MX_GPIO_Init+0x118>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	0289      	lsls	r1, r1, #10
 8001640:	430a      	orrs	r2, r1
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <MX_GPIO_Init+0x118>)
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <MX_GPIO_Init+0x118>)
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <MX_GPIO_Init+0x118>)
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	02c9      	lsls	r1, r1, #11
 800165c:	430a      	orrs	r2, r1
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <MX_GPIO_Init+0x118>)
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	02db      	lsls	r3, r3, #11
 8001668:	4013      	ands	r3, r2
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_T1_Pin|K_SEL_Pin, GPIO_PIN_RESET);
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <MX_GPIO_Init+0x11c>)
 8001670:	2200      	movs	r2, #0
 8001672:	2103      	movs	r1, #3
 8001674:	0018      	movs	r0, r3
 8001676:	f000 fc3b 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_T2_GPIO_Port, CS_T2_Pin, GPIO_PIN_RESET);
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4822      	ldr	r0, [pc, #136]	; (8001708 <MX_GPIO_Init+0x120>)
 8001680:	2200      	movs	r2, #0
 8001682:	0019      	movs	r1, r3
 8001684:	f000 fc34 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001688:	193b      	adds	r3, r7, r4
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0192      	lsls	r2, r2, #6
 800168e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001690:	193b      	adds	r3, r7, r4
 8001692:	4a1e      	ldr	r2, [pc, #120]	; (800170c <MX_GPIO_Init+0x124>)
 8001694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	193b      	adds	r3, r7, r4
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800169c:	193b      	adds	r3, r7, r4
 800169e:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <MX_GPIO_Init+0x120>)
 80016a0:	0019      	movs	r1, r3
 80016a2:	0010      	movs	r0, r2
 80016a4:	f000 fab4 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_T1_Pin K_SEL_Pin */
  GPIO_InitStruct.Pin = CS_T1_Pin|K_SEL_Pin;
 80016a8:	0021      	movs	r1, r4
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	2203      	movs	r2, #3
 80016ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2201      	movs	r2, #1
 80016b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	000c      	movs	r4, r1
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <MX_GPIO_Init+0x11c>)
 80016c8:	0019      	movs	r1, r3
 80016ca:	0010      	movs	r0, r2
 80016cc:	f000 faa0 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_T2_Pin */
  GPIO_InitStruct.Pin = CS_T2_Pin;
 80016d0:	0021      	movs	r1, r4
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	2280      	movs	r2, #128	; 0x80
 80016d6:	0052      	lsls	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2201      	movs	r2, #1
 80016de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_T2_GPIO_Port, &GPIO_InitStruct);
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <MX_GPIO_Init+0x120>)
 80016f0:	0019      	movs	r1, r3
 80016f2:	0010      	movs	r0, r2
 80016f4:	f000 fa8c 	bl	8001c10 <HAL_GPIO_Init>

}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b00b      	add	sp, #44	; 0x2c
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	40021000 	.word	0x40021000
 8001704:	48000400 	.word	0x48000400
 8001708:	48000800 	.word	0x48000800
 800170c:	10210000 	.word	0x10210000

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_MspInit+0x44>)
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_MspInit+0x44>)
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	619a      	str	r2, [r3, #24]
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_MspInit+0x44>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2201      	movs	r2, #1
 8001734:	4013      	ands	r3, r2
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_MspInit+0x44>)
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_MspInit+0x44>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	0549      	lsls	r1, r1, #21
 8001744:	430a      	orrs	r2, r1
 8001746:	61da      	str	r2, [r3, #28]
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_MspInit+0x44>)
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	055b      	lsls	r3, r3, #21
 8001750:	4013      	ands	r3, r2
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	2314      	movs	r3, #20
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	0018      	movs	r0, r3
 8001772:	2314      	movs	r3, #20
 8001774:	001a      	movs	r2, r3
 8001776:	2100      	movs	r1, #0
 8001778:	f002 fad2 	bl	8003d20 <memset>
  if(hspi->Instance==SPI1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <HAL_SPI_MspInit+0x90>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d132      	bne.n	80017ec <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_SPI_MspInit+0x94>)
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_SPI_MspInit+0x94>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0149      	lsls	r1, r1, #5
 8001790:	430a      	orrs	r2, r1
 8001792:	619a      	str	r2, [r3, #24]
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_SPI_MspInit+0x94>)
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	015b      	lsls	r3, r3, #5
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_SPI_MspInit+0x94>)
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_SPI_MspInit+0x94>)
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0289      	lsls	r1, r1, #10
 80017ac:	430a      	orrs	r2, r1
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_SPI_MspInit+0x94>)
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	029b      	lsls	r3, r3, #10
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017be:	2114      	movs	r1, #20
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2260      	movs	r2, #96	; 0x60
 80017c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2202      	movs	r2, #2
 80017ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2203      	movs	r2, #3
 80017d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	187a      	adds	r2, r7, r1
 80017e0:	2390      	movs	r3, #144	; 0x90
 80017e2:	05db      	lsls	r3, r3, #23
 80017e4:	0011      	movs	r1, r2
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 fa12 	bl	8001c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b00a      	add	sp, #40	; 0x28
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40013000 	.word	0x40013000
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	; 0x30
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	231c      	movs	r3, #28
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	0018      	movs	r0, r3
 800180a:	2314      	movs	r3, #20
 800180c:	001a      	movs	r2, r3
 800180e:	2100      	movs	r1, #0
 8001810:	f002 fa86 	bl	8003d20 <memset>
  if(huart->Instance==USART1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a39      	ldr	r2, [pc, #228]	; (8001900 <HAL_UART_MspInit+0x104>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d134      	bne.n	8001888 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_UART_MspInit+0x108>)
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <HAL_UART_MspInit+0x108>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	01c9      	lsls	r1, r1, #7
 8001828:	430a      	orrs	r2, r1
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_UART_MspInit+0x108>)
 800182e:	699a      	ldr	r2, [r3, #24]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	01db      	lsls	r3, r3, #7
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_UART_MspInit+0x108>)
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_UART_MspInit+0x108>)
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	0289      	lsls	r1, r1, #10
 8001844:	430a      	orrs	r2, r1
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <HAL_UART_MspInit+0x108>)
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	029b      	lsls	r3, r3, #10
 8001850:	4013      	ands	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001856:	211c      	movs	r1, #28
 8001858:	187b      	adds	r3, r7, r1
 800185a:	22c0      	movs	r2, #192	; 0xc0
 800185c:	00d2      	lsls	r2, r2, #3
 800185e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	187b      	adds	r3, r7, r1
 8001862:	2202      	movs	r2, #2
 8001864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	187b      	adds	r3, r7, r1
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2203      	movs	r2, #3
 8001870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2201      	movs	r2, #1
 8001876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	187a      	adds	r2, r7, r1
 800187a:	2390      	movs	r3, #144	; 0x90
 800187c:	05db      	lsls	r3, r3, #23
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f000 f9c5 	bl	8001c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001886:	e037      	b.n	80018f8 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <HAL_UART_MspInit+0x10c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d132      	bne.n	80018f8 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_UART_MspInit+0x108>)
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_UART_MspInit+0x108>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	0289      	lsls	r1, r1, #10
 800189c:	430a      	orrs	r2, r1
 800189e:	61da      	str	r2, [r3, #28]
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_UART_MspInit+0x108>)
 80018a2:	69da      	ldr	r2, [r3, #28]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_UART_MspInit+0x108>)
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_UART_MspInit+0x108>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0289      	lsls	r1, r1, #10
 80018b8:	430a      	orrs	r2, r1
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_UART_MspInit+0x108>)
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ca:	211c      	movs	r1, #28
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2202      	movs	r2, #2
 80018d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2201      	movs	r2, #1
 80018e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	187a      	adds	r2, r7, r1
 80018ec:	2390      	movs	r3, #144	; 0x90
 80018ee:	05db      	lsls	r3, r3, #23
 80018f0:	0011      	movs	r1, r2
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 f98c 	bl	8001c10 <HAL_GPIO_Init>
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b00c      	add	sp, #48	; 0x30
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40013800 	.word	0x40013800
 8001904:	40021000 	.word	0x40021000
 8001908:	40004400 	.word	0x40004400

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 f87a 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <Reset_Handler>:
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <LoopForever+0x2>)
 800194a:	4685      	mov	sp, r0
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <LoopForever+0x6>)
 800194e:	490e      	ldr	r1, [pc, #56]	; (8001988 <LoopForever+0xa>)
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <LoopForever+0xe>)
 8001952:	2300      	movs	r3, #0
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:
 8001956:	58d4      	ldr	r4, [r2, r3]
 8001958:	50c4      	str	r4, [r0, r3]
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:
 800195c:	18c4      	adds	r4, r0, r3
 800195e:	428c      	cmp	r4, r1
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <LoopForever+0x12>)
 8001964:	4c0b      	ldr	r4, [pc, #44]	; (8001994 <LoopForever+0x16>)
 8001966:	2300      	movs	r3, #0
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:
 800196e:	42a2      	cmp	r2, r4
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>
 8001972:	f7ff ffe4 	bl	800193e <SystemInit>
 8001976:	f002 f9af 	bl	8003cd8 <__libc_init_array>
 800197a:	f7ff fcd1 	bl	8001320 <main>

0800197e <LoopForever>:
 800197e:	e7fe      	b.n	800197e <LoopForever>
 8001980:	20002000 	.word	0x20002000
 8001984:	20000000 	.word	0x20000000
 8001988:	20000014 	.word	0x20000014
 800198c:	08003dd0 	.word	0x08003dd0
 8001990:	20000014 	.word	0x20000014
 8001994:	20000350 	.word	0x20000350

08001998 <ADC1_IRQHandler>:
 8001998:	e7fe      	b.n	8001998 <ADC1_IRQHandler>
	...

0800199c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_Init+0x24>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_Init+0x24>)
 80019a6:	2110      	movs	r1, #16
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f000 f809 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b2:	f7ff feb3 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	40022000 	.word	0x40022000

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_InitTick+0x5c>)
 80019ce:	681c      	ldr	r4, [r3, #0]
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_InitTick+0x60>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	0019      	movs	r1, r3
 80019d6:	23fa      	movs	r3, #250	; 0xfa
 80019d8:	0098      	lsls	r0, r3, #2
 80019da:	f7fe fb95 	bl	8000108 <__udivsi3>
 80019de:	0003      	movs	r3, r0
 80019e0:	0019      	movs	r1, r3
 80019e2:	0020      	movs	r0, r4
 80019e4:	f7fe fb90 	bl	8000108 <__udivsi3>
 80019e8:	0003      	movs	r3, r0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 f903 	bl	8001bf6 <HAL_SYSTICK_Config>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e00f      	b.n	8001a18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d80b      	bhi.n	8001a16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	2301      	movs	r3, #1
 8001a02:	425b      	negs	r3, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	0018      	movs	r0, r3
 8001a08:	f000 f8e0 	bl	8001bcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_InitTick+0x64>)
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b003      	add	sp, #12
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000010 	.word	0x20000010
 8001a28:	2000000c 	.word	0x2000000c

08001a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x1c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	001a      	movs	r2, r3
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x20>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	18d2      	adds	r2, r2, r3
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_IncTick+0x20>)
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	20000010 	.word	0x20000010
 8001a4c:	2000034c 	.word	0x2000034c

08001a50 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <HAL_GetTick+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	2000034c 	.word	0x2000034c

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_Delay+0x40>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	001a      	movs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	189b      	adds	r3, r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	f7ff ffe0 	bl	8001a50 <HAL_GetTick>
 8001a90:	0002      	movs	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b004      	add	sp, #16
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000010 	.word	0x20000010

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	0002      	movs	r2, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	1dfb      	adds	r3, r7, #7
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b7f      	cmp	r3, #127	; 0x7f
 8001abc:	d828      	bhi.n	8001b10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001abe:	4a2f      	ldr	r2, [pc, #188]	; (8001b7c <__NVIC_SetPriority+0xd4>)
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	33c0      	adds	r3, #192	; 0xc0
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	589b      	ldr	r3, [r3, r2]
 8001ace:	1dfa      	adds	r2, r7, #7
 8001ad0:	7812      	ldrb	r2, [r2, #0]
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	00d2      	lsls	r2, r2, #3
 8001ada:	21ff      	movs	r1, #255	; 0xff
 8001adc:	4091      	lsls	r1, r2
 8001ade:	000a      	movs	r2, r1
 8001ae0:	43d2      	mvns	r2, r2
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	019b      	lsls	r3, r3, #6
 8001aea:	22ff      	movs	r2, #255	; 0xff
 8001aec:	401a      	ands	r2, r3
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	0018      	movs	r0, r3
 8001af4:	2303      	movs	r3, #3
 8001af6:	4003      	ands	r3, r0
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afc:	481f      	ldr	r0, [pc, #124]	; (8001b7c <__NVIC_SetPriority+0xd4>)
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b25b      	sxtb	r3, r3
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	430a      	orrs	r2, r1
 8001b08:	33c0      	adds	r3, #192	; 0xc0
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b0e:	e031      	b.n	8001b74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b10:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <__NVIC_SetPriority+0xd8>)
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	0019      	movs	r1, r3
 8001b18:	230f      	movs	r3, #15
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	3b08      	subs	r3, #8
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3306      	adds	r3, #6
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	18d3      	adds	r3, r2, r3
 8001b26:	3304      	adds	r3, #4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	1dfa      	adds	r2, r7, #7
 8001b2c:	7812      	ldrb	r2, [r2, #0]
 8001b2e:	0011      	movs	r1, r2
 8001b30:	2203      	movs	r2, #3
 8001b32:	400a      	ands	r2, r1
 8001b34:	00d2      	lsls	r2, r2, #3
 8001b36:	21ff      	movs	r1, #255	; 0xff
 8001b38:	4091      	lsls	r1, r2
 8001b3a:	000a      	movs	r2, r1
 8001b3c:	43d2      	mvns	r2, r2
 8001b3e:	401a      	ands	r2, r3
 8001b40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	019b      	lsls	r3, r3, #6
 8001b46:	22ff      	movs	r2, #255	; 0xff
 8001b48:	401a      	ands	r2, r3
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	2303      	movs	r3, #3
 8001b52:	4003      	ands	r3, r0
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b58:	4809      	ldr	r0, [pc, #36]	; (8001b80 <__NVIC_SetPriority+0xd8>)
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	001c      	movs	r4, r3
 8001b60:	230f      	movs	r3, #15
 8001b62:	4023      	ands	r3, r4
 8001b64:	3b08      	subs	r3, #8
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	3306      	adds	r3, #6
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	18c3      	adds	r3, r0, r3
 8001b70:	3304      	adds	r3, #4
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b003      	add	sp, #12
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <SysTick_Config+0x40>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e010      	b.n	8001bbc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <SysTick_Config+0x44>)
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	3a01      	subs	r2, #1
 8001ba0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	425b      	negs	r3, r3
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff ff7d 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <SysTick_Config+0x44>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SysTick_Config+0x44>)
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	00ffffff 	.word	0x00ffffff
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	1c02      	adds	r2, r0, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	0011      	movs	r1, r2
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b004      	add	sp, #16
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff ffbf 	bl	8001b84 <SysTick_Config>
 8001c06:	0003      	movs	r3, r0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	e14f      	b.n	8001ec0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4091      	lsls	r1, r2
 8001c2a:	000a      	movs	r2, r1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d100      	bne.n	8001c38 <HAL_GPIO_Init+0x28>
 8001c36:	e140      	b.n	8001eba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d00b      	beq.n	8001c58 <HAL_GPIO_Init+0x48>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d007      	beq.n	8001c58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c4c:	2b11      	cmp	r3, #17
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b12      	cmp	r3, #18
 8001c56:	d130      	bne.n	8001cba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	409a      	lsls	r2, r3
 8001c66:	0013      	movs	r3, r2
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	43da      	mvns	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0xea>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b12      	cmp	r3, #18
 8001cf8:	d123      	bne.n	8001d42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	58d3      	ldr	r3, [r2, r3]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	409a      	lsls	r2, r3
 8001d14:	0013      	movs	r3, r2
 8001d16:	43da      	mvns	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2107      	movs	r1, #7
 8001d26:	400b      	ands	r3, r1
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	6939      	ldr	r1, [r7, #16]
 8001d40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	0013      	movs	r3, r2
 8001d52:	43da      	mvns	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	401a      	ands	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	409a      	lsls	r2, r3
 8001d68:	0013      	movs	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	055b      	lsls	r3, r3, #21
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d100      	bne.n	8001d84 <HAL_GPIO_Init+0x174>
 8001d82:	e09a      	b.n	8001eba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d84:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <HAL_GPIO_Init+0x2c8>)
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_GPIO_Init+0x2c8>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	619a      	str	r2, [r3, #24]
 8001d90:	4b51      	ldr	r3, [pc, #324]	; (8001ed8 <HAL_GPIO_Init+0x2c8>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d9c:	4a4f      	ldr	r2, [pc, #316]	; (8001edc <HAL_GPIO_Init+0x2cc>)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	589b      	ldr	r3, [r3, r2]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	409a      	lsls	r2, r3
 8001db6:	0013      	movs	r3, r2
 8001db8:	43da      	mvns	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	2390      	movs	r3, #144	; 0x90
 8001dc4:	05db      	lsls	r3, r3, #23
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x1e2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a44      	ldr	r2, [pc, #272]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x1de>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a43      	ldr	r2, [pc, #268]	; (8001ee4 <HAL_GPIO_Init+0x2d4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x1da>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a42      	ldr	r2, [pc, #264]	; (8001ee8 <HAL_GPIO_Init+0x2d8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x1d6>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x1e4>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x1e4>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x1e4>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x1e4>
 8001df2:	2300      	movs	r3, #0
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	2103      	movs	r1, #3
 8001df8:	400a      	ands	r2, r1
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	; (8001edc <HAL_GPIO_Init+0x2cc>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	025b      	lsls	r3, r3, #9
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43da      	mvns	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	4013      	ands	r3, r2
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	035b      	lsls	r3, r3, #13
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	039b      	lsls	r3, r3, #14
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	40da      	lsrs	r2, r3
 8001ec8:	1e13      	subs	r3, r2, #0
 8001eca:	d000      	beq.n	8001ece <HAL_GPIO_Init+0x2be>
 8001ecc:	e6a8      	b.n	8001c20 <HAL_GPIO_Init+0x10>
  } 
}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b006      	add	sp, #24
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	48000800 	.word	0x48000800
 8001ee8:	48000c00 	.word	0x48000c00
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	0008      	movs	r0, r1
 8001efa:	0011      	movs	r1, r2
 8001efc:	1cbb      	adds	r3, r7, #2
 8001efe:	1c02      	adds	r2, r0, #0
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	1c7b      	adds	r3, r7, #1
 8001f04:	1c0a      	adds	r2, r1, #0
 8001f06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f08:	1c7b      	adds	r3, r7, #1
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d004      	beq.n	8001f1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f10:	1cbb      	adds	r3, r7, #2
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f18:	e003      	b.n	8001f22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f1a:	1cbb      	adds	r3, r7, #2
 8001f1c:	881a      	ldrh	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b002      	add	sp, #8
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e303      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	d100      	bne.n	8001f4a <HAL_RCC_OscConfig+0x1e>
 8001f48:	e08d      	b.n	8002066 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f4a:	4bc4      	ldr	r3, [pc, #784]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	220c      	movs	r2, #12
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d00e      	beq.n	8001f74 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f56:	4bc1      	ldr	r3, [pc, #772]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x64>
 8001f62:	4bbe      	ldr	r3, [pc, #760]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	025b      	lsls	r3, r3, #9
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d10d      	bne.n	8001f90 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	4bb9      	ldr	r3, [pc, #740]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	029b      	lsls	r3, r3, #10
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <HAL_RCC_OscConfig+0x56>
 8001f80:	e070      	b.n	8002064 <HAL_RCC_OscConfig+0x138>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d000      	beq.n	8001f8c <HAL_RCC_OscConfig+0x60>
 8001f8a:	e06b      	b.n	8002064 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e2da      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x7c>
 8001f98:	4bb0      	ldr	r3, [pc, #704]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4baf      	ldr	r3, [pc, #700]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	0249      	lsls	r1, r1, #9
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e02f      	b.n	8002008 <HAL_RCC_OscConfig+0xdc>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x9e>
 8001fb0:	4baa      	ldr	r3, [pc, #680]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4ba9      	ldr	r3, [pc, #676]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001fb6:	49aa      	ldr	r1, [pc, #680]	; (8002260 <HAL_RCC_OscConfig+0x334>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	4ba7      	ldr	r3, [pc, #668]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4ba6      	ldr	r3, [pc, #664]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001fc2:	49a8      	ldr	r1, [pc, #672]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e01e      	b.n	8002008 <HAL_RCC_OscConfig+0xdc>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xc4>
 8001fd2:	4ba2      	ldr	r3, [pc, #648]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4ba1      	ldr	r3, [pc, #644]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	02c9      	lsls	r1, r1, #11
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	4b9e      	ldr	r3, [pc, #632]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b9d      	ldr	r3, [pc, #628]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001fe6:	2180      	movs	r1, #128	; 0x80
 8001fe8:	0249      	lsls	r1, r1, #9
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0xdc>
 8001ff0:	4b9a      	ldr	r3, [pc, #616]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b99      	ldr	r3, [pc, #612]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001ff6:	499a      	ldr	r1, [pc, #616]	; (8002260 <HAL_RCC_OscConfig+0x334>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	4b97      	ldr	r3, [pc, #604]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b96      	ldr	r3, [pc, #600]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8002002:	4998      	ldr	r1, [pc, #608]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002004:	400a      	ands	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d014      	beq.n	800203a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7ff fd1e 	bl	8001a50 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201a:	f7ff fd19 	bl	8001a50 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e28c      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202c:	4b8b      	ldr	r3, [pc, #556]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	029b      	lsls	r3, r3, #10
 8002034:	4013      	ands	r3, r2
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0xee>
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203a:	f7ff fd09 	bl	8001a50 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fd04 	bl	8001a50 <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e277      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	4b81      	ldr	r3, [pc, #516]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	029b      	lsls	r3, r3, #10
 800205e:	4013      	ands	r3, r2
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x118>
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2202      	movs	r2, #2
 800206c:	4013      	ands	r3, r2
 800206e:	d100      	bne.n	8002072 <HAL_RCC_OscConfig+0x146>
 8002070:	e069      	b.n	8002146 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002072:	4b7a      	ldr	r3, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	220c      	movs	r2, #12
 8002078:	4013      	ands	r3, r2
 800207a:	d00b      	beq.n	8002094 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800207c:	4b77      	ldr	r3, [pc, #476]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	220c      	movs	r2, #12
 8002082:	4013      	ands	r3, r2
 8002084:	2b08      	cmp	r3, #8
 8002086:	d11c      	bne.n	80020c2 <HAL_RCC_OscConfig+0x196>
 8002088:	4b74      	ldr	r3, [pc, #464]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	025b      	lsls	r3, r3, #9
 8002090:	4013      	ands	r3, r2
 8002092:	d116      	bne.n	80020c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002094:	4b71      	ldr	r3, [pc, #452]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2202      	movs	r2, #2
 800209a:	4013      	ands	r3, r2
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x17e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e24d      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b6c      	ldr	r3, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	22f8      	movs	r2, #248	; 0xf8
 80020b0:	4393      	bics	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	00da      	lsls	r2, r3, #3
 80020ba:	4b68      	ldr	r3, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c0:	e041      	b.n	8002146 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d024      	beq.n	8002114 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ca:	4b64      	ldr	r3, [pc, #400]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fcbb 	bl	8001a50 <HAL_GetTick>
 80020da:	0003      	movs	r3, r0
 80020dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e0:	f7ff fcb6 	bl	8001a50 <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e229      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f2:	4b5a      	ldr	r3, [pc, #360]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d0f1      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b57      	ldr	r3, [pc, #348]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	22f8      	movs	r2, #248	; 0xf8
 8002102:	4393      	bics	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	00da      	lsls	r2, r3, #3
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e018      	b.n	8002146 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002114:	4b51      	ldr	r3, [pc, #324]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800211a:	2101      	movs	r1, #1
 800211c:	438a      	bics	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff fc96 	bl	8001a50 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212a:	f7ff fc91 	bl	8001a50 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e204      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213c:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d1f1      	bne.n	800212a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	4013      	ands	r3, r2
 800214e:	d036      	beq.n	80021be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d019      	beq.n	800218c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002158:	4b40      	ldr	r3, [pc, #256]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800215a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215c:	4b3f      	ldr	r3, [pc, #252]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800215e:	2101      	movs	r1, #1
 8002160:	430a      	orrs	r2, r1
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7ff fc74 	bl	8001a50 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216e:	f7ff fc6f 	bl	8001a50 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1e2      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002180:	4b36      	ldr	r3, [pc, #216]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	2202      	movs	r2, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d0f1      	beq.n	800216e <HAL_RCC_OscConfig+0x242>
 800218a:	e018      	b.n	80021be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800218e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002190:	4b32      	ldr	r3, [pc, #200]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8002192:	2101      	movs	r1, #1
 8002194:	438a      	bics	r2, r1
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7ff fc5a 	bl	8001a50 <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a2:	f7ff fc55 	bl	8001a50 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e1c8      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2202      	movs	r2, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d1f1      	bne.n	80021a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2204      	movs	r2, #4
 80021c4:	4013      	ands	r3, r2
 80021c6:	d100      	bne.n	80021ca <HAL_RCC_OscConfig+0x29e>
 80021c8:	e0b6      	b.n	8002338 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	231f      	movs	r3, #31
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	055b      	lsls	r3, r3, #21
 80021da:	4013      	ands	r3, r2
 80021dc:	d111      	bne.n	8002202 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	0549      	lsls	r1, r1, #21
 80021e8:	430a      	orrs	r2, r1
 80021ea:	61da      	str	r2, [r3, #28]
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x330>)
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	055b      	lsls	r3, r3, #21
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021fa:	231f      	movs	r3, #31
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_RCC_OscConfig+0x33c>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4013      	ands	r3, r2
 800220c:	d11a      	bne.n	8002244 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_RCC_OscConfig+0x33c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_RCC_OscConfig+0x33c>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0049      	lsls	r1, r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221c:	f7ff fc18 	bl	8001a50 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7ff fc13 	bl	8001a50 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e186      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_OscConfig+0x33c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4013      	ands	r3, r2
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10f      	bne.n	800226c <HAL_RCC_OscConfig+0x340>
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_OscConfig+0x330>)
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	4b02      	ldr	r3, [pc, #8]	; (800225c <HAL_RCC_OscConfig+0x330>)
 8002252:	2101      	movs	r1, #1
 8002254:	430a      	orrs	r2, r1
 8002256:	621a      	str	r2, [r3, #32]
 8002258:	e036      	b.n	80022c8 <HAL_RCC_OscConfig+0x39c>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	40021000 	.word	0x40021000
 8002260:	fffeffff 	.word	0xfffeffff
 8002264:	fffbffff 	.word	0xfffbffff
 8002268:	40007000 	.word	0x40007000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10c      	bne.n	800228e <HAL_RCC_OscConfig+0x362>
 8002274:	4bb6      	ldr	r3, [pc, #728]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	4bb5      	ldr	r3, [pc, #724]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800227a:	2101      	movs	r1, #1
 800227c:	438a      	bics	r2, r1
 800227e:	621a      	str	r2, [r3, #32]
 8002280:	4bb3      	ldr	r3, [pc, #716]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	4bb2      	ldr	r3, [pc, #712]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002286:	2104      	movs	r1, #4
 8002288:	438a      	bics	r2, r1
 800228a:	621a      	str	r2, [r3, #32]
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x39c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x384>
 8002296:	4bae      	ldr	r3, [pc, #696]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	4bad      	ldr	r3, [pc, #692]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800229c:	2104      	movs	r1, #4
 800229e:	430a      	orrs	r2, r1
 80022a0:	621a      	str	r2, [r3, #32]
 80022a2:	4bab      	ldr	r3, [pc, #684]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	4baa      	ldr	r3, [pc, #680]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	430a      	orrs	r2, r1
 80022ac:	621a      	str	r2, [r3, #32]
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0x39c>
 80022b0:	4ba7      	ldr	r3, [pc, #668]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	4ba6      	ldr	r3, [pc, #664]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	438a      	bics	r2, r1
 80022ba:	621a      	str	r2, [r3, #32]
 80022bc:	4ba4      	ldr	r3, [pc, #656]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	4ba3      	ldr	r3, [pc, #652]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80022c2:	2104      	movs	r1, #4
 80022c4:	438a      	bics	r2, r1
 80022c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d014      	beq.n	80022fa <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7ff fbbe 	bl	8001a50 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e009      	b.n	80022ee <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7ff fbb9 	bl	8001a50 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	4a9b      	ldr	r2, [pc, #620]	; (8002554 <HAL_RCC_OscConfig+0x628>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e12b      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	4b98      	ldr	r3, [pc, #608]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x3ae>
 80022f8:	e013      	b.n	8002322 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fba9 	bl	8001a50 <HAL_GetTick>
 80022fe:	0003      	movs	r3, r0
 8002300:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	e009      	b.n	8002318 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7ff fba4 	bl	8001a50 <HAL_GetTick>
 8002308:	0002      	movs	r2, r0
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	4a91      	ldr	r2, [pc, #580]	; (8002554 <HAL_RCC_OscConfig+0x628>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e116      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	4b8d      	ldr	r3, [pc, #564]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	2202      	movs	r2, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002322:	231f      	movs	r3, #31
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	4b87      	ldr	r3, [pc, #540]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002332:	4989      	ldr	r1, [pc, #548]	; (8002558 <HAL_RCC_OscConfig+0x62c>)
 8002334:	400a      	ands	r2, r1
 8002336:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2210      	movs	r2, #16
 800233e:	4013      	ands	r3, r2
 8002340:	d063      	beq.n	800240a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d12a      	bne.n	80023a0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800234a:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800234c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234e:	4b80      	ldr	r3, [pc, #512]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002350:	2104      	movs	r1, #4
 8002352:	430a      	orrs	r2, r1
 8002354:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002356:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235a:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7ff fb75 	bl	8001a50 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800236c:	f7ff fb70 	bl	8001a50 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0e3      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800237e:	4b74      	ldr	r3, [pc, #464]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	d0f1      	beq.n	800236c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002388:	4b71      	ldr	r3, [pc, #452]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238c:	22f8      	movs	r2, #248	; 0xf8
 800238e:	4393      	bics	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	00da      	lsls	r2, r3, #3
 8002398:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800239a:	430a      	orrs	r2, r1
 800239c:	635a      	str	r2, [r3, #52]	; 0x34
 800239e:	e034      	b.n	800240a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	3305      	adds	r3, #5
 80023a6:	d111      	bne.n	80023cc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023a8:	4b69      	ldr	r3, [pc, #420]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80023aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80023ae:	2104      	movs	r1, #4
 80023b0:	438a      	bics	r2, r1
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023b4:	4b66      	ldr	r3, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	22f8      	movs	r2, #248	; 0xf8
 80023ba:	4393      	bics	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	00da      	lsls	r2, r3, #3
 80023c4:	4b62      	ldr	r3, [pc, #392]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ca:	e01e      	b.n	800240a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023cc:	4b60      	ldr	r3, [pc, #384]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80023ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d0:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80023d2:	2104      	movs	r1, #4
 80023d4:	430a      	orrs	r2, r1
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023d8:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80023da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023dc:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80023de:	2101      	movs	r1, #1
 80023e0:	438a      	bics	r2, r1
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7ff fb34 	bl	8001a50 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023ee:	f7ff fb2f 	bl	8001a50 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0a2      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	2202      	movs	r2, #2
 8002406:	4013      	ands	r3, r2
 8002408:	d1f1      	bne.n	80023ee <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d100      	bne.n	8002414 <HAL_RCC_OscConfig+0x4e8>
 8002412:	e097      	b.n	8002544 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002414:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	220c      	movs	r2, #12
 800241a:	4013      	ands	r3, r2
 800241c:	2b08      	cmp	r3, #8
 800241e:	d100      	bne.n	8002422 <HAL_RCC_OscConfig+0x4f6>
 8002420:	e06b      	b.n	80024fa <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d14c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002430:	494a      	ldr	r1, [pc, #296]	; (800255c <HAL_RCC_OscConfig+0x630>)
 8002432:	400a      	ands	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7ff fb0b 	bl	8001a50 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002440:	f7ff fb06 	bl	8001a50 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e079      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	049b      	lsls	r3, r3, #18
 800245a:	4013      	ands	r3, r2
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800245e:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	220f      	movs	r2, #15
 8002464:	4393      	bics	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246c:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800246e:	430a      	orrs	r2, r1
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
 8002472:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a3a      	ldr	r2, [pc, #232]	; (8002560 <HAL_RCC_OscConfig+0x634>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	431a      	orrs	r2, r3
 8002486:	4b32      	ldr	r3, [pc, #200]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	0449      	lsls	r1, r1, #17
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff fad9 	bl	8001a50 <HAL_GetTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a4:	f7ff fad4 	bl	8001a50 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e047      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	049b      	lsls	r3, r3, #18
 80024be:	4013      	ands	r3, r2
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x578>
 80024c2:	e03f      	b.n	8002544 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80024ca:	4924      	ldr	r1, [pc, #144]	; (800255c <HAL_RCC_OscConfig+0x630>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff fabe 	bl	8001a50 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff fab9 	bl	8001a50 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e02c      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	049b      	lsls	r3, r3, #18
 80024f4:	4013      	ands	r3, r2
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x5ae>
 80024f8:	e024      	b.n	8002544 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e01f      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800250c:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCC_OscConfig+0x624>)
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	025b      	lsls	r3, r3, #9
 8002518:	401a      	ands	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	429a      	cmp	r2, r3
 8002520:	d10e      	bne.n	8002540 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	220f      	movs	r2, #15
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	23f0      	movs	r3, #240	; 0xf0
 8002534:	039b      	lsls	r3, r3, #14
 8002536:	401a      	ands	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b008      	add	sp, #32
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	40021000 	.word	0x40021000
 8002554:	00001388 	.word	0x00001388
 8002558:	efffffff 	.word	0xefffffff
 800255c:	feffffff 	.word	0xfeffffff
 8002560:	ffc2ffff 	.word	0xffc2ffff

08002564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0b3      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	4013      	ands	r3, r2
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d911      	bls.n	80025aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	4393      	bics	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e09a      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2202      	movs	r2, #2
 80025b0:	4013      	ands	r3, r2
 80025b2:	d015      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2204      	movs	r2, #4
 80025ba:	4013      	ands	r3, r2
 80025bc:	d006      	beq.n	80025cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025be:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025c4:	21e0      	movs	r1, #224	; 0xe0
 80025c6:	00c9      	lsls	r1, r1, #3
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025cc:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	22f0      	movs	r2, #240	; 0xf0
 80025d2:	4393      	bics	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	d040      	beq.n	800266c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	4013      	ands	r3, r2
 80025fc:	d114      	bne.n	8002628 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06e      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	049b      	lsls	r3, r3, #18
 8002612:	4013      	ands	r3, r2
 8002614:	d108      	bne.n	8002628 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e062      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2202      	movs	r2, #2
 8002620:	4013      	ands	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e05b      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002628:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2203      	movs	r2, #3
 800262e:	4393      	bics	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7ff fa08 	bl	8001a50 <HAL_GetTick>
 8002640:	0003      	movs	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002644:	e009      	b.n	800265a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002646:	f7ff fa03 	bl	8001a50 <HAL_GetTick>
 800264a:	0002      	movs	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_RCC_ClockConfig+0x18c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e042      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	220c      	movs	r2, #12
 8002660:	401a      	ands	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1ec      	bne.n	8002646 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d211      	bcs.n	800269e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2201      	movs	r2, #1
 8002680:	4393      	bics	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2201      	movs	r2, #1
 8002692:	4013      	ands	r3, r2
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e020      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2204      	movs	r2, #4
 80026a4:	4013      	ands	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_RCC_ClockConfig+0x190>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026bc:	f000 f820 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026c0:	0001      	movs	r1, r0
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	220f      	movs	r2, #15
 80026ca:	4013      	ands	r3, r2
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x194>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	000a      	movs	r2, r1
 80026d2:	40da      	lsrs	r2, r3
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x198>)
 80026d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7ff f973 	bl	80019c4 <HAL_InitTick>
  
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b004      	add	sp, #16
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	00001388 	.word	0x00001388
 80026f4:	fffff8ff 	.word	0xfffff8ff
 80026f8:	08003db0 	.word	0x08003db0
 80026fc:	20000008 	.word	0x20000008

08002700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b08f      	sub	sp, #60	; 0x3c
 8002704:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002706:	2314      	movs	r3, #20
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800270c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800270e:	c313      	stmia	r3!, {r0, r1, r4}
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	4a29      	ldr	r2, [pc, #164]	; (80027bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002718:	ca13      	ldmia	r2!, {r0, r1, r4}
 800271a:	c313      	stmia	r3!, {r0, r1, r4}
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002724:	2300      	movs	r3, #0
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
 8002728:	2300      	movs	r3, #0
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	220c      	movs	r2, #12
 800273e:	4013      	ands	r3, r2
 8002740:	2b04      	cmp	r3, #4
 8002742:	d002      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x4a>
 8002744:	2b08      	cmp	r3, #8
 8002746:	d003      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x50>
 8002748:	e02d      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800274e:	e02d      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	220f      	movs	r2, #15
 8002756:	4013      	ands	r3, r2
 8002758:	2214      	movs	r2, #20
 800275a:	18ba      	adds	r2, r7, r2
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	220f      	movs	r2, #15
 8002766:	4013      	ands	r3, r2
 8002768:	1d3a      	adds	r2, r7, #4
 800276a:	5cd3      	ldrb	r3, [r2, r3]
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800276e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	025b      	lsls	r3, r3, #9
 8002774:	4013      	ands	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800277a:	4812      	ldr	r0, [pc, #72]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800277c:	f7fd fcc4 	bl	8000108 <__udivsi3>
 8002780:	0003      	movs	r3, r0
 8002782:	001a      	movs	r2, r3
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	4353      	muls	r3, r2
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
 800278a:	e009      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800278c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800278e:	000a      	movs	r2, r1
 8002790:	0152      	lsls	r2, r2, #5
 8002792:	1a52      	subs	r2, r2, r1
 8002794:	0193      	lsls	r3, r2, #6
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	185b      	adds	r3, r3, r1
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80027a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027a4:	e002      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b00f      	add	sp, #60	; 0x3c
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	08003d50 	.word	0x08003d50
 80027bc:	08003d60 	.word	0x08003d60
 80027c0:	40021000 	.word	0x40021000
 80027c4:	007a1200 	.word	0x007a1200

080027c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	20000008 	.word	0x20000008

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027e0:	f7ff fff2 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027e4:	0001      	movs	r1, r0
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	2207      	movs	r2, #7
 80027ee:	4013      	ands	r3, r2
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	40d9      	lsrs	r1, r3
 80027f6:	000b      	movs	r3, r1
}    
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	40021000 	.word	0x40021000
 8002804:	08003dc0 	.word	0x08003dc0

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	025b      	lsls	r3, r3, #9
 8002820:	4013      	ands	r3, r2
 8002822:	d100      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002824:	e08f      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002826:	2317      	movs	r3, #23
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282e:	4b57      	ldr	r3, [pc, #348]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	055b      	lsls	r3, r3, #21
 8002836:	4013      	ands	r3, r2
 8002838:	d111      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	4b54      	ldr	r3, [pc, #336]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0549      	lsls	r1, r1, #21
 8002844:	430a      	orrs	r2, r1
 8002846:	61da      	str	r2, [r3, #28]
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	055b      	lsls	r3, r3, #21
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2317      	movs	r3, #23
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b4c      	ldr	r3, [pc, #304]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4013      	ands	r3, r2
 8002868:	d11a      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b48      	ldr	r3, [pc, #288]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002870:	2180      	movs	r1, #128	; 0x80
 8002872:	0049      	lsls	r1, r1, #1
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002878:	f7ff f8ea 	bl	8001a50 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7ff f8e5 	bl	8001a50 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e077      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4013      	ands	r3, r2
 800289e:	d0f0      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028a2:	6a1a      	ldr	r2, [r3, #32]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d034      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	23c0      	movs	r3, #192	; 0xc0
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d02c      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a33      	ldr	r2, [pc, #204]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028cc:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	4b2e      	ldr	r3, [pc, #184]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	0249      	lsls	r1, r1, #9
 80028d6:	430a      	orrs	r2, r1
 80028d8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028dc:	6a1a      	ldr	r2, [r3, #32]
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028e0:	492d      	ldr	r1, [pc, #180]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028e6:	4b29      	ldr	r3, [pc, #164]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	4013      	ands	r3, r2
 80028f2:	d013      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff f8ac 	bl	8001a50 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e009      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7ff f8a7 	bl	8001a50 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e038      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d0f0      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800292c:	430a      	orrs	r2, r1
 800292e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002930:	2317      	movs	r3, #23
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002940:	4917      	ldr	r1, [pc, #92]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002942:	400a      	ands	r2, r1
 8002944:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2201      	movs	r2, #1
 800294c:	4013      	ands	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	2203      	movs	r2, #3
 8002956:	4393      	bics	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002960:	430a      	orrs	r2, r1
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2220      	movs	r2, #32
 800296a:	4013      	ands	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	2210      	movs	r2, #16
 8002974:	4393      	bics	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800297e:	430a      	orrs	r2, r1
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b006      	add	sp, #24
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	fffffcff 	.word	0xfffffcff
 8002998:	fffeffff 	.word	0xfffeffff
 800299c:	00001388 	.word	0x00001388
 80029a0:	efffffff 	.word	0xefffffff

080029a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e08a      	b.n	8002acc <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	225d      	movs	r2, #93	; 0x5d
 80029c0:	5c9b      	ldrb	r3, [r3, r2]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	225c      	movs	r2, #92	; 0x5c
 80029cc:	2100      	movs	r1, #0
 80029ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7fe fec6 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	225d      	movs	r2, #93	; 0x5d
 80029dc:	2102      	movs	r1, #2
 80029de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2140      	movs	r1, #64	; 0x40
 80029ec:	438a      	bics	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	23e0      	movs	r3, #224	; 0xe0
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d902      	bls.n	8002a02 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e002      	b.n	8002a08 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	015b      	lsls	r3, r3, #5
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	23f0      	movs	r3, #240	; 0xf0
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d008      	beq.n	8002a26 <HAL_SPI_Init+0x82>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	23e0      	movs	r3, #224	; 0xe0
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d002      	beq.n	8002a26 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	23e0      	movs	r3, #224	; 0xe0
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d903      	bls.n	8002a42 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a40:	e002      	b.n	8002a48 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6999      	ldr	r1, [r3, #24]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	400b      	ands	r3, r1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	0011      	movs	r1, r2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	0011      	movs	r1, r2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <HAL_SPI_Init+0x130>)
 8002ab8:	400a      	ands	r2, r1
 8002aba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	225d      	movs	r2, #93	; 0x5d
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b004      	add	sp, #16
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	fffff7ff 	.word	0xfffff7ff

08002ad8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	1dbb      	adds	r3, r7, #6
 8002ae6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ae8:	2317      	movs	r3, #23
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	2382      	movs	r3, #130	; 0x82
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d113      	bne.n	8002b24 <HAL_SPI_Receive+0x4c>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10f      	bne.n	8002b24 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	225d      	movs	r2, #93	; 0x5d
 8002b08:	2104      	movs	r1, #4
 8002b0a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b0c:	1dbb      	adds	r3, r7, #6
 8002b0e:	881c      	ldrh	r4, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	0023      	movs	r3, r4
 8002b1c:	f000 f920 	bl	8002d60 <HAL_SPI_TransmitReceive>
 8002b20:	0003      	movs	r3, r0
 8002b22:	e114      	b.n	8002d4e <HAL_SPI_Receive+0x276>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	225c      	movs	r2, #92	; 0x5c
 8002b28:	5c9b      	ldrb	r3, [r3, r2]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_SPI_Receive+0x5a>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e10d      	b.n	8002d4e <HAL_SPI_Receive+0x276>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	225c      	movs	r2, #92	; 0x5c
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b3a:	f7fe ff89 	bl	8001a50 <HAL_GetTick>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	225d      	movs	r2, #93	; 0x5d
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d004      	beq.n	8002b58 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002b4e:	2317      	movs	r3, #23
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	2202      	movs	r2, #2
 8002b54:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b56:	e0ef      	b.n	8002d38 <HAL_SPI_Receive+0x260>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_SPI_Receive+0x8e>
 8002b5e:	1dbb      	adds	r3, r7, #6
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d104      	bne.n	8002b70 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002b66:	2317      	movs	r3, #23
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b6e:	e0e3      	b.n	8002d38 <HAL_SPI_Receive+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	225d      	movs	r2, #93	; 0x5d
 8002b74:	2104      	movs	r1, #4
 8002b76:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1dba      	adds	r2, r7, #6
 8002b88:	2144      	movs	r1, #68	; 0x44
 8002b8a:	8812      	ldrh	r2, [r2, #0]
 8002b8c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1dba      	adds	r2, r7, #6
 8002b92:	2146      	movs	r1, #70	; 0x46
 8002b94:	8812      	ldrh	r2, [r2, #0]
 8002b96:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	23e0      	movs	r3, #224	; 0xe0
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d908      	bls.n	8002bd4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4962      	ldr	r1, [pc, #392]	; (8002d58 <HAL_SPI_Receive+0x280>)
 8002bce:	400a      	ands	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	e008      	b.n	8002be6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2180      	movs	r1, #128	; 0x80
 8002be0:	0149      	lsls	r1, r1, #5
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d107      	bne.n	8002c02 <HAL_SPI_Receive+0x12a>
  {
    SPI_1LINE_RX(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4957      	ldr	r1, [pc, #348]	; (8002d5c <HAL_SPI_Receive+0x284>)
 8002bfe:	400a      	ands	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2240      	movs	r2, #64	; 0x40
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d007      	beq.n	8002c20 <HAL_SPI_Receive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2140      	movs	r1, #64	; 0x40
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	23e0      	movs	r3, #224	; 0xe0
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d900      	bls.n	8002c2e <HAL_SPI_Receive+0x156>
 8002c2c:	e069      	b.n	8002d02 <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c2e:	e031      	b.n	8002c94 <HAL_SPI_Receive+0x1bc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2201      	movs	r2, #1
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d117      	bne.n	8002c6e <HAL_SPI_Receive+0x196>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	330c      	adds	r3, #12
 8002c44:	001a      	movs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2246      	movs	r2, #70	; 0x46
 8002c5e:	5a9b      	ldrh	r3, [r3, r2]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b299      	uxth	r1, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2246      	movs	r2, #70	; 0x46
 8002c6a:	5299      	strh	r1, [r3, r2]
 8002c6c:	e012      	b.n	8002c94 <HAL_SPI_Receive+0x1bc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c6e:	f7fe feef 	bl	8001a50 <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d802      	bhi.n	8002c84 <HAL_SPI_Receive+0x1ac>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	d102      	bne.n	8002c8a <HAL_SPI_Receive+0x1b2>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <HAL_SPI_Receive+0x1bc>
        {
          errorcode = HAL_TIMEOUT;
 8002c8a:	2317      	movs	r3, #23
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	2203      	movs	r2, #3
 8002c90:	701a      	strb	r2, [r3, #0]
          goto error;
 8002c92:	e051      	b.n	8002d38 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2246      	movs	r2, #70	; 0x46
 8002c98:	5a9b      	ldrh	r3, [r3, r2]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1c7      	bne.n	8002c30 <HAL_SPI_Receive+0x158>
 8002ca0:	e035      	b.n	8002d0e <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d115      	bne.n	8002cdc <HAL_SPI_Receive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	b292      	uxth	r2, r2
 8002cbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	1c9a      	adds	r2, r3, #2
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2246      	movs	r2, #70	; 0x46
 8002ccc:	5a9b      	ldrh	r3, [r3, r2]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b299      	uxth	r1, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2246      	movs	r2, #70	; 0x46
 8002cd8:	5299      	strh	r1, [r3, r2]
 8002cda:	e012      	b.n	8002d02 <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cdc:	f7fe feb8 	bl	8001a50 <HAL_GetTick>
 8002ce0:	0002      	movs	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d802      	bhi.n	8002cf2 <HAL_SPI_Receive+0x21a>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_SPI_Receive+0x220>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <HAL_SPI_Receive+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8002cf8:	2317      	movs	r3, #23
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d00:	e01a      	b.n	8002d38 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2246      	movs	r2, #70	; 0x46
 8002d06:	5a9b      	ldrh	r3, [r3, r2]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1c9      	bne.n	8002ca2 <HAL_SPI_Receive+0x1ca>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	6839      	ldr	r1, [r7, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 fb41 	bl	800339c <SPI_EndRxTransaction>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_SPI_Receive+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <HAL_SPI_Receive+0x25e>
  {
    errorcode = HAL_ERROR;
 8002d2c:	2317      	movs	r3, #23
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e000      	b.n	8002d38 <HAL_SPI_Receive+0x260>
  }

error :
 8002d36:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	225d      	movs	r2, #93	; 0x5d
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	225c      	movs	r2, #92	; 0x5c
 8002d44:	2100      	movs	r1, #0
 8002d46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d48:	2317      	movs	r3, #23
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b007      	add	sp, #28
 8002d54:	bd90      	pop	{r4, r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	ffffefff 	.word	0xffffefff
 8002d5c:	ffffbfff 	.word	0xffffbfff

08002d60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	1cbb      	adds	r3, r7, #2
 8002d70:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d72:	2301      	movs	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d76:	2323      	movs	r3, #35	; 0x23
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	225c      	movs	r2, #92	; 0x5c
 8002d82:	5c9b      	ldrb	r3, [r3, r2]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_SPI_TransmitReceive+0x2c>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e21f      	b.n	80031cc <HAL_SPI_TransmitReceive+0x46c>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	225c      	movs	r2, #92	; 0x5c
 8002d90:	2101      	movs	r1, #1
 8002d92:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d94:	f7fe fe5c 	bl	8001a50 <HAL_GetTick>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d9c:	201b      	movs	r0, #27
 8002d9e:	183b      	adds	r3, r7, r0
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	215d      	movs	r1, #93	; 0x5d
 8002da4:	5c52      	ldrb	r2, [r2, r1]
 8002da6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002dae:	2312      	movs	r3, #18
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	1cba      	adds	r2, r7, #2
 8002db4:	8812      	ldrh	r2, [r2, #0]
 8002db6:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8002db8:	2310      	movs	r3, #16
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	1cba      	adds	r2, r7, #2
 8002dbe:	8812      	ldrh	r2, [r2, #0]
 8002dc0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dc2:	183b      	adds	r3, r7, r0
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d012      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x90>
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	2382      	movs	r3, #130	; 0x82
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d108      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x86>
 8002ddc:	231b      	movs	r3, #27
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d004      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 8002de6:	2323      	movs	r3, #35	; 0x23
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	2202      	movs	r2, #2
 8002dec:	701a      	strb	r2, [r3, #0]
    goto error;
 8002dee:	e1e2      	b.n	80031b6 <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <HAL_SPI_TransmitReceive+0xa4>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_SPI_TransmitReceive+0xa4>
 8002dfc:	1cbb      	adds	r3, r7, #2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d104      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8002e04:	2323      	movs	r3, #35	; 0x23
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e0c:	e1d3      	b.n	80031b6 <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	225d      	movs	r2, #93	; 0x5d
 8002e12:	5c9b      	ldrb	r3, [r3, r2]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d003      	beq.n	8002e22 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	225d      	movs	r2, #93	; 0x5d
 8002e1e:	2105      	movs	r1, #5
 8002e20:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1cba      	adds	r2, r7, #2
 8002e32:	2146      	movs	r1, #70	; 0x46
 8002e34:	8812      	ldrh	r2, [r2, #0]
 8002e36:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1cba      	adds	r2, r7, #2
 8002e3c:	2144      	movs	r1, #68	; 0x44
 8002e3e:	8812      	ldrh	r2, [r2, #0]
 8002e40:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1cba      	adds	r2, r7, #2
 8002e4c:	8812      	ldrh	r2, [r2, #0]
 8002e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1cba      	adds	r2, r7, #2
 8002e54:	8812      	ldrh	r2, [r2, #0]
 8002e56:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	23e0      	movs	r3, #224	; 0xe0
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d804      	bhi.n	8002e7a <HAL_SPI_TransmitReceive+0x11a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d908      	bls.n	8002e8c <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	49ca      	ldr	r1, [pc, #808]	; (80031b0 <HAL_SPI_TransmitReceive+0x450>)
 8002e86:	400a      	ands	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	e008      	b.n	8002e9e <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	0149      	lsls	r1, r1, #5
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2240      	movs	r2, #64	; 0x40
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d007      	beq.n	8002ebc <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	23e0      	movs	r3, #224	; 0xe0
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d800      	bhi.n	8002eca <HAL_SPI_TransmitReceive+0x16a>
 8002ec8:	e07f      	b.n	8002fca <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_SPI_TransmitReceive+0x17e>
 8002ed2:	2312      	movs	r3, #18
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d000      	beq.n	8002ede <HAL_SPI_TransmitReceive+0x17e>
 8002edc:	e069      	b.n	8002fb2 <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	1c9a      	adds	r2, r3, #2
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f02:	e056      	b.n	8002fb2 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d11b      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x1ea>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_SPI_TransmitReceive+0x1ea>
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d113      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	881a      	ldrh	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	1c9a      	adds	r2, r3, #2
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d11c      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x232>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2246      	movs	r2, #70	; 0x46
 8002f5c:	5a9b      	ldrh	r3, [r3, r2]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d016      	beq.n	8002f92 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	1c9a      	adds	r2, r3, #2
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2246      	movs	r2, #70	; 0x46
 8002f80:	5a9b      	ldrh	r3, [r3, r2]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b299      	uxth	r1, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2246      	movs	r2, #70	; 0x46
 8002f8c:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f92:	f7fe fd5d 	bl	8001a50 <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d807      	bhi.n	8002fb2 <HAL_SPI_TransmitReceive+0x252>
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	d004      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 8002fa8:	2323      	movs	r3, #35	; 0x23
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	2203      	movs	r2, #3
 8002fae:	701a      	strb	r2, [r3, #0]
        goto error;
 8002fb0:	e101      	b.n	80031b6 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1a3      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x1a4>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2246      	movs	r2, #70	; 0x46
 8002fc0:	5a9b      	ldrh	r3, [r3, r2]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d19d      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x1a4>
 8002fc8:	e0e2      	b.n	8003190 <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x27e>
 8002fd2:	2312      	movs	r3, #18
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d000      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x27e>
 8002fdc:	e0cb      	b.n	8003176 <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d912      	bls.n	800300e <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	1c9a      	adds	r2, r3, #2
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b02      	subs	r3, #2
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800300c:	e0b3      	b.n	8003176 <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	330c      	adds	r3, #12
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003034:	e09f      	b.n	8003176 <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d134      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x34e>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d02f      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x34e>
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	2b01      	cmp	r3, #1
 8003052:	d12c      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d912      	bls.n	8003084 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	1c9a      	adds	r2, r3, #2
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b02      	subs	r3, #2
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003082:	e012      	b.n	80030aa <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2201      	movs	r2, #1
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d149      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x3f0>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2246      	movs	r2, #70	; 0x46
 80030c0:	5a9b      	ldrh	r3, [r3, r2]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d043      	beq.n	8003150 <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2246      	movs	r2, #70	; 0x46
 80030cc:	5a9b      	ldrh	r3, [r3, r2]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d924      	bls.n	800311e <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	b292      	uxth	r2, r2
 80030e0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2246      	movs	r2, #70	; 0x46
 80030f0:	5a9b      	ldrh	r3, [r3, r2]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b02      	subs	r3, #2
 80030f6:	b299      	uxth	r1, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2246      	movs	r2, #70	; 0x46
 80030fc:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2246      	movs	r2, #70	; 0x46
 8003102:	5a9b      	ldrh	r3, [r3, r2]
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d820      	bhi.n	800314c <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	0149      	lsls	r1, r1, #5
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	e016      	b.n	800314c <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	001a      	movs	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2246      	movs	r2, #70	; 0x46
 800313e:	5a9b      	ldrh	r3, [r3, r2]
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b299      	uxth	r1, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2246      	movs	r2, #70	; 0x46
 800314a:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800314c:	2301      	movs	r3, #1
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003150:	f7fe fc7e 	bl	8001a50 <HAL_GetTick>
 8003154:	0002      	movs	r2, r0
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315c:	429a      	cmp	r2, r3
 800315e:	d802      	bhi.n	8003166 <HAL_SPI_TransmitReceive+0x406>
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	3301      	adds	r3, #1
 8003164:	d102      	bne.n	800316c <HAL_SPI_TransmitReceive+0x40c>
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 800316c:	2323      	movs	r3, #35	; 0x23
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2203      	movs	r2, #3
 8003172:	701a      	strb	r2, [r3, #0]
        goto error;
 8003174:	e01f      	b.n	80031b6 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d000      	beq.n	8003182 <HAL_SPI_TransmitReceive+0x422>
 8003180:	e759      	b.n	8003036 <HAL_SPI_TransmitReceive+0x2d6>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2246      	movs	r2, #70	; 0x46
 8003186:	5a9b      	ldrh	r3, [r3, r2]
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d000      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x430>
 800318e:	e752      	b.n	8003036 <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	0018      	movs	r0, r3
 8003198:	f000 f95e 	bl	8003458 <SPI_EndRxTxTransaction>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d009      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 80031a0:	2323      	movs	r3, #35	; 0x23
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	661a      	str	r2, [r3, #96]	; 0x60
 80031ae:	e002      	b.n	80031b6 <HAL_SPI_TransmitReceive+0x456>
 80031b0:	ffffefff 	.word	0xffffefff
  }

error :
 80031b4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	225d      	movs	r2, #93	; 0x5d
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	225c      	movs	r2, #92	; 0x5c
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80031c6:	2323      	movs	r3, #35	; 0x23
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	781b      	ldrb	r3, [r3, #0]
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b00a      	add	sp, #40	; 0x28
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e4:	e050      	b.n	8003288 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	d04d      	beq.n	8003288 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80031ec:	f7fe fc30 	bl	8001a50 <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d902      	bls.n	8003202 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d142      	bne.n	8003288 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	21e0      	movs	r1, #224	; 0xe0
 800320e:	438a      	bics	r2, r1
 8003210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	2382      	movs	r3, #130	; 0x82
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	429a      	cmp	r2, r3
 800321c:	d113      	bne.n	8003246 <SPI_WaitFlagStateUntilTimeout+0x72>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	429a      	cmp	r2, r3
 8003228:	d005      	beq.n	8003236 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	429a      	cmp	r2, r3
 8003234:	d107      	bne.n	8003246 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2140      	movs	r1, #64	; 0x40
 8003242:	438a      	bics	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	429a      	cmp	r2, r3
 8003250:	d110      	bne.n	8003274 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4914      	ldr	r1, [pc, #80]	; (80032b0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800325e:	400a      	ands	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	0189      	lsls	r1, r1, #6
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	225d      	movs	r2, #93	; 0x5d
 8003278:	2101      	movs	r1, #1
 800327a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	225c      	movs	r2, #92	; 0x5c
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e00f      	b.n	80032a8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	425a      	negs	r2, r3
 8003298:	4153      	adcs	r3, r2
 800329a:	b2db      	uxtb	r3, r3
 800329c:	001a      	movs	r2, r3
 800329e:	1dfb      	adds	r3, r7, #7
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d19f      	bne.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b004      	add	sp, #16
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	ffffdfff 	.word	0xffffdfff

080032b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80032c2:	e05c      	b.n	800337e <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	23c0      	movs	r3, #192	; 0xc0
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d106      	bne.n	80032dc <SPI_WaitFifoStateUntilTimeout+0x28>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	3301      	adds	r3, #1
 80032e0:	d04d      	beq.n	800337e <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80032e2:	f7fe fbb5 	bl	8001a50 <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d902      	bls.n	80032f8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d142      	bne.n	800337e <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	21e0      	movs	r1, #224	; 0xe0
 8003304:	438a      	bics	r2, r1
 8003306:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	2382      	movs	r3, #130	; 0x82
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	429a      	cmp	r2, r3
 8003312:	d113      	bne.n	800333c <SPI_WaitFifoStateUntilTimeout+0x88>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	429a      	cmp	r2, r3
 800331e:	d005      	beq.n	800332c <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	429a      	cmp	r2, r3
 800332a:	d107      	bne.n	800333c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2140      	movs	r1, #64	; 0x40
 8003338:	438a      	bics	r2, r1
 800333a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	019b      	lsls	r3, r3, #6
 8003344:	429a      	cmp	r2, r3
 8003346:	d110      	bne.n	800336a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4911      	ldr	r1, [pc, #68]	; (8003398 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8003354:	400a      	ands	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2180      	movs	r1, #128	; 0x80
 8003364:	0189      	lsls	r1, r1, #6
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	225d      	movs	r2, #93	; 0x5d
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	225c      	movs	r2, #92	; 0x5c
 8003376:	2100      	movs	r1, #0
 8003378:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e008      	b.n	8003390 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	429a      	cmp	r2, r3
 800338c:	d19a      	bne.n	80032c4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b004      	add	sp, #16
 8003396:	bd80      	pop	{r7, pc}
 8003398:	ffffdfff 	.word	0xffffdfff

0800339c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	2382      	movs	r3, #130	; 0x82
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d113      	bne.n	80033dc <SPI_EndRxTransaction+0x40>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	429a      	cmp	r2, r3
 80033be:	d005      	beq.n	80033cc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d107      	bne.n	80033dc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2140      	movs	r1, #64	; 0x40
 80033d8:	438a      	bics	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	0013      	movs	r3, r2
 80033e6:	2200      	movs	r2, #0
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	f7ff fef3 	bl	80031d4 <SPI_WaitFlagStateUntilTimeout>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d007      	beq.n	8003402 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	2220      	movs	r2, #32
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e026      	b.n	8003450 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	2382      	movs	r3, #130	; 0x82
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	429a      	cmp	r2, r3
 800340c:	d11f      	bne.n	800344e <SPI_EndRxTransaction+0xb2>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	429a      	cmp	r2, r3
 8003418:	d005      	beq.n	8003426 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	429a      	cmp	r2, r3
 8003424:	d113      	bne.n	800344e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	23c0      	movs	r3, #192	; 0xc0
 800342a:	00d9      	lsls	r1, r3, #3
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	0013      	movs	r3, r2
 8003434:	2200      	movs	r2, #0
 8003436:	f7ff ff3d 	bl	80032b4 <SPI_WaitFifoStateUntilTimeout>
 800343a:	1e03      	subs	r3, r0, #0
 800343c:	d007      	beq.n	800344e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	2220      	movs	r2, #32
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e000      	b.n	8003450 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b004      	add	sp, #16
 8003456:	bd80      	pop	{r7, pc}

08003458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	23c0      	movs	r3, #192	; 0xc0
 8003468:	0159      	lsls	r1, r3, #5
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	0013      	movs	r3, r2
 8003472:	2200      	movs	r2, #0
 8003474:	f7ff ff1e 	bl	80032b4 <SPI_WaitFifoStateUntilTimeout>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d007      	beq.n	800348c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003480:	2220      	movs	r2, #32
 8003482:	431a      	orrs	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e027      	b.n	80034dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	0013      	movs	r3, r2
 8003496:	2200      	movs	r2, #0
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	f7ff fe9b 	bl	80031d4 <SPI_WaitFlagStateUntilTimeout>
 800349e:	1e03      	subs	r3, r0, #0
 80034a0:	d007      	beq.n	80034b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a6:	2220      	movs	r2, #32
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e014      	b.n	80034dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	23c0      	movs	r3, #192	; 0xc0
 80034b6:	00d9      	lsls	r1, r3, #3
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	0013      	movs	r3, r2
 80034c0:	2200      	movs	r2, #0
 80034c2:	f7ff fef7 	bl	80032b4 <SPI_WaitFifoStateUntilTimeout>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d007      	beq.n	80034da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	2220      	movs	r2, #32
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e000      	b.n	80034dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b004      	add	sp, #16
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e044      	b.n	8003580 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d107      	bne.n	800350e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2270      	movs	r2, #112	; 0x70
 8003502:	2100      	movs	r1, #0
 8003504:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f7fe f977 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2224      	movs	r2, #36	; 0x24
 8003512:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2101      	movs	r1, #1
 8003520:	438a      	bics	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0018      	movs	r0, r3
 8003528:	f000 f8d8 	bl	80036dc <UART_SetConfig>
 800352c:	0003      	movs	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e024      	b.n	8003580 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	0018      	movs	r0, r3
 8003542:	f000 fa51 	bl	80039e8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	490d      	ldr	r1, [pc, #52]	; (8003588 <HAL_UART_Init+0xa4>)
 8003552:	400a      	ands	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2108      	movs	r1, #8
 8003562:	438a      	bics	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 fae9 	bl	8003b50 <UART_CheckIdleState>
 800357e:	0003      	movs	r3, r0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}
 8003588:	fffff7ff 	.word	0xfffff7ff

0800358c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	1dbb      	adds	r3, r7, #6
 800359a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d000      	beq.n	80035a6 <HAL_UART_Transmit+0x1a>
 80035a4:	e095      	b.n	80036d2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_UART_Transmit+0x28>
 80035ac:	1dbb      	adds	r3, r7, #6
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e08d      	b.n	80036d4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d109      	bne.n	80035d8 <HAL_UART_Transmit+0x4c>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e07d      	b.n	80036d4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2270      	movs	r2, #112	; 0x70
 80035dc:	5c9b      	ldrb	r3, [r3, r2]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Transmit+0x5a>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e076      	b.n	80036d4 <HAL_UART_Transmit+0x148>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2270      	movs	r2, #112	; 0x70
 80035ea:	2101      	movs	r1, #1
 80035ec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	; 0x21
 80035f8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80035fa:	f7fe fa29 	bl	8001a50 <HAL_GetTick>
 80035fe:	0003      	movs	r3, r0
 8003600:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1dba      	adds	r2, r7, #6
 8003606:	2150      	movs	r1, #80	; 0x50
 8003608:	8812      	ldrh	r2, [r2, #0]
 800360a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1dba      	adds	r2, r7, #6
 8003610:	2152      	movs	r1, #82	; 0x52
 8003612:	8812      	ldrh	r2, [r2, #0]
 8003614:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	015b      	lsls	r3, r3, #5
 800361e:	429a      	cmp	r2, r3
 8003620:	d108      	bne.n	8003634 <HAL_UART_Transmit+0xa8>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	e003      	b.n	800363c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003638:	2300      	movs	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800363c:	e02d      	b.n	800369a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	0013      	movs	r3, r2
 8003648:	2200      	movs	r2, #0
 800364a:	2180      	movs	r1, #128	; 0x80
 800364c:	f000 fac6 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003650:	1e03      	subs	r3, r0, #0
 8003652:	d001      	beq.n	8003658 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e03d      	b.n	80036d4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	05d2      	lsls	r2, r2, #23
 8003668:	0dd2      	lsrs	r2, r2, #23
 800366a:	b292      	uxth	r2, r2
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3302      	adds	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	e008      	b.n	8003688 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	b292      	uxth	r2, r2
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3301      	adds	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2252      	movs	r2, #82	; 0x52
 800368c:	5a9b      	ldrh	r3, [r3, r2]
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b299      	uxth	r1, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2252      	movs	r2, #82	; 0x52
 8003698:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2252      	movs	r2, #82	; 0x52
 800369e:	5a9b      	ldrh	r3, [r3, r2]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1cb      	bne.n	800363e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	0013      	movs	r3, r2
 80036b0:	2200      	movs	r2, #0
 80036b2:	2140      	movs	r1, #64	; 0x40
 80036b4:	f000 fa92 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e009      	b.n	80036d4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2270      	movs	r2, #112	; 0x70
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b008      	add	sp, #32
 80036da:	bd80      	pop	{r7, pc}

080036dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80036e8:	2317      	movs	r3, #23
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4aad      	ldr	r2, [pc, #692]	; (80039c4 <UART_SetConfig+0x2e8>)
 8003710:	4013      	ands	r3, r2
 8003712:	0019      	movs	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	430a      	orrs	r2, r1
 800371c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4aa8      	ldr	r2, [pc, #672]	; (80039c8 <UART_SetConfig+0x2ec>)
 8003726:	4013      	ands	r3, r2
 8003728:	0019      	movs	r1, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a9f      	ldr	r2, [pc, #636]	; (80039cc <UART_SetConfig+0x2f0>)
 800374e:	4013      	ands	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	430a      	orrs	r2, r1
 800375a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a9b      	ldr	r2, [pc, #620]	; (80039d0 <UART_SetConfig+0x2f4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d125      	bne.n	80037b2 <UART_SetConfig+0xd6>
 8003766:	4b9b      	ldr	r3, [pc, #620]	; (80039d4 <UART_SetConfig+0x2f8>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	2203      	movs	r2, #3
 800376c:	4013      	ands	r3, r2
 800376e:	2b01      	cmp	r3, #1
 8003770:	d00f      	beq.n	8003792 <UART_SetConfig+0xb6>
 8003772:	d304      	bcc.n	800377e <UART_SetConfig+0xa2>
 8003774:	2b02      	cmp	r3, #2
 8003776:	d011      	beq.n	800379c <UART_SetConfig+0xc0>
 8003778:	2b03      	cmp	r3, #3
 800377a:	d005      	beq.n	8003788 <UART_SetConfig+0xac>
 800377c:	e013      	b.n	80037a6 <UART_SetConfig+0xca>
 800377e:	231f      	movs	r3, #31
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e022      	b.n	80037ce <UART_SetConfig+0xf2>
 8003788:	231f      	movs	r3, #31
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e01d      	b.n	80037ce <UART_SetConfig+0xf2>
 8003792:	231f      	movs	r3, #31
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	2204      	movs	r2, #4
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e018      	b.n	80037ce <UART_SetConfig+0xf2>
 800379c:	231f      	movs	r3, #31
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2208      	movs	r2, #8
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e013      	b.n	80037ce <UART_SetConfig+0xf2>
 80037a6:	231f      	movs	r3, #31
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	2210      	movs	r2, #16
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	e00d      	b.n	80037ce <UART_SetConfig+0xf2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a88      	ldr	r2, [pc, #544]	; (80039d8 <UART_SetConfig+0x2fc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d104      	bne.n	80037c6 <UART_SetConfig+0xea>
 80037bc:	231f      	movs	r3, #31
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e003      	b.n	80037ce <UART_SetConfig+0xf2>
 80037c6:	231f      	movs	r3, #31
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2210      	movs	r2, #16
 80037cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d000      	beq.n	80037dc <UART_SetConfig+0x100>
 80037da:	e07d      	b.n	80038d8 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 80037dc:	231f      	movs	r3, #31
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d01c      	beq.n	8003820 <UART_SetConfig+0x144>
 80037e6:	dc02      	bgt.n	80037ee <UART_SetConfig+0x112>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <UART_SetConfig+0x11c>
 80037ec:	e04b      	b.n	8003886 <UART_SetConfig+0x1aa>
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d025      	beq.n	800383e <UART_SetConfig+0x162>
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d037      	beq.n	8003866 <UART_SetConfig+0x18a>
 80037f6:	e046      	b.n	8003886 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fff0 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 80037fc:	0003      	movs	r3, r0
 80037fe:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	005a      	lsls	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	18d2      	adds	r2, r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	0019      	movs	r1, r3
 8003812:	0010      	movs	r0, r2
 8003814:	f7fc fc78 	bl	8000108 <__udivsi3>
 8003818:	0003      	movs	r3, r0
 800381a:	b29b      	uxth	r3, r3
 800381c:	61bb      	str	r3, [r7, #24]
        break;
 800381e:	e037      	b.n	8003890 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	4a6d      	ldr	r2, [pc, #436]	; (80039dc <UART_SetConfig+0x300>)
 8003828:	189a      	adds	r2, r3, r2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f7fc fc69 	bl	8000108 <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	b29b      	uxth	r3, r3
 800383a:	61bb      	str	r3, [r7, #24]
        break;
 800383c:	e028      	b.n	8003890 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe ff5f 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 8003842:	0003      	movs	r3, r0
 8003844:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	005a      	lsls	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	18d2      	adds	r2, r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	0019      	movs	r1, r3
 8003858:	0010      	movs	r0, r2
 800385a:	f7fc fc55 	bl	8000108 <__udivsi3>
 800385e:	0003      	movs	r3, r0
 8003860:	b29b      	uxth	r3, r3
 8003862:	61bb      	str	r3, [r7, #24]
        break;
 8003864:	e014      	b.n	8003890 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	2280      	movs	r2, #128	; 0x80
 800386e:	0252      	lsls	r2, r2, #9
 8003870:	189a      	adds	r2, r3, r2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0019      	movs	r1, r3
 8003878:	0010      	movs	r0, r2
 800387a:	f7fc fc45 	bl	8000108 <__udivsi3>
 800387e:	0003      	movs	r3, r0
 8003880:	b29b      	uxth	r3, r3
 8003882:	61bb      	str	r3, [r7, #24]
        break;
 8003884:	e004      	b.n	8003890 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003886:	2317      	movs	r3, #23
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
        break;
 800388e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b0f      	cmp	r3, #15
 8003894:	d91b      	bls.n	80038ce <UART_SetConfig+0x1f2>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	4a51      	ldr	r2, [pc, #324]	; (80039e0 <UART_SetConfig+0x304>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d817      	bhi.n	80038ce <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	200a      	movs	r0, #10
 80038a4:	183b      	adds	r3, r7, r0
 80038a6:	210f      	movs	r1, #15
 80038a8:	438a      	bics	r2, r1
 80038aa:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	085b      	lsrs	r3, r3, #1
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2207      	movs	r2, #7
 80038b4:	4013      	ands	r3, r2
 80038b6:	b299      	uxth	r1, r3
 80038b8:	183b      	adds	r3, r7, r0
 80038ba:	183a      	adds	r2, r7, r0
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	183a      	adds	r2, r7, r0
 80038c8:	8812      	ldrh	r2, [r2, #0]
 80038ca:	60da      	str	r2, [r3, #12]
 80038cc:	e06c      	b.n	80039a8 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80038ce:	2317      	movs	r3, #23
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e067      	b.n	80039a8 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80038d8:	231f      	movs	r3, #31
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d01b      	beq.n	800391a <UART_SetConfig+0x23e>
 80038e2:	dc02      	bgt.n	80038ea <UART_SetConfig+0x20e>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <UART_SetConfig+0x218>
 80038e8:	e049      	b.n	800397e <UART_SetConfig+0x2a2>
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d024      	beq.n	8003938 <UART_SetConfig+0x25c>
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d035      	beq.n	800395e <UART_SetConfig+0x282>
 80038f2:	e044      	b.n	800397e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f4:	f7fe ff72 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 80038f8:	0003      	movs	r3, r0
 80038fa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	085a      	lsrs	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	18d2      	adds	r2, r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0019      	movs	r1, r3
 800390c:	0010      	movs	r0, r2
 800390e:	f7fc fbfb 	bl	8000108 <__udivsi3>
 8003912:	0003      	movs	r3, r0
 8003914:	b29b      	uxth	r3, r3
 8003916:	61bb      	str	r3, [r7, #24]
        break;
 8003918:	e036      	b.n	8003988 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	4a30      	ldr	r2, [pc, #192]	; (80039e4 <UART_SetConfig+0x308>)
 8003922:	189a      	adds	r2, r3, r2
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0019      	movs	r1, r3
 800392a:	0010      	movs	r0, r2
 800392c:	f7fc fbec 	bl	8000108 <__udivsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	b29b      	uxth	r3, r3
 8003934:	61bb      	str	r3, [r7, #24]
        break;
 8003936:	e027      	b.n	8003988 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003938:	f7fe fee2 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 800393c:	0003      	movs	r3, r0
 800393e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	085a      	lsrs	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	18d2      	adds	r2, r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	0019      	movs	r1, r3
 8003950:	0010      	movs	r0, r2
 8003952:	f7fc fbd9 	bl	8000108 <__udivsi3>
 8003956:	0003      	movs	r3, r0
 8003958:	b29b      	uxth	r3, r3
 800395a:	61bb      	str	r3, [r7, #24]
        break;
 800395c:	e014      	b.n	8003988 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	2280      	movs	r2, #128	; 0x80
 8003966:	0212      	lsls	r2, r2, #8
 8003968:	189a      	adds	r2, r3, r2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	0019      	movs	r1, r3
 8003970:	0010      	movs	r0, r2
 8003972:	f7fc fbc9 	bl	8000108 <__udivsi3>
 8003976:	0003      	movs	r3, r0
 8003978:	b29b      	uxth	r3, r3
 800397a:	61bb      	str	r3, [r7, #24]
        break;
 800397c:	e004      	b.n	8003988 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800397e:	2317      	movs	r3, #23
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
        break;
 8003986:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d908      	bls.n	80039a0 <UART_SetConfig+0x2c4>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <UART_SetConfig+0x304>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d804      	bhi.n	80039a0 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	e003      	b.n	80039a8 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80039a0:	2317      	movs	r3, #23
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80039b4:	2317      	movs	r3, #23
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	781b      	ldrb	r3, [r3, #0]
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b008      	add	sp, #32
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	ffff69f3 	.word	0xffff69f3
 80039c8:	ffffcfff 	.word	0xffffcfff
 80039cc:	fffff4ff 	.word	0xfffff4ff
 80039d0:	40013800 	.word	0x40013800
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40004400 	.word	0x40004400
 80039dc:	00f42400 	.word	0x00f42400
 80039e0:	0000ffff 	.word	0x0000ffff
 80039e4:	007a1200 	.word	0x007a1200

080039e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2201      	movs	r2, #1
 80039f6:	4013      	ands	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <UART_AdvFeatureConfig+0x144>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2202      	movs	r2, #2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4a43      	ldr	r2, [pc, #268]	; (8003b30 <UART_AdvFeatureConfig+0x148>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	0019      	movs	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2204      	movs	r2, #4
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a3b      	ldr	r2, [pc, #236]	; (8003b34 <UART_AdvFeatureConfig+0x14c>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <UART_AdvFeatureConfig+0x150>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <UART_AdvFeatureConfig+0x154>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4a25      	ldr	r2, [pc, #148]	; (8003b40 <UART_AdvFeatureConfig+0x158>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2240      	movs	r2, #64	; 0x40
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d01d      	beq.n	8003b02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <UART_AdvFeatureConfig+0x15c>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	035b      	lsls	r3, r3, #13
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d10b      	bne.n	8003b02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <UART_AdvFeatureConfig+0x160>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	0019      	movs	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	2280      	movs	r2, #128	; 0x80
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d00b      	beq.n	8003b24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <UART_AdvFeatureConfig+0x164>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
  }
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	fffdffff 	.word	0xfffdffff
 8003b30:	fffeffff 	.word	0xfffeffff
 8003b34:	fffbffff 	.word	0xfffbffff
 8003b38:	ffff7fff 	.word	0xffff7fff
 8003b3c:	ffffefff 	.word	0xffffefff
 8003b40:	ffffdfff 	.word	0xffffdfff
 8003b44:	ffefffff 	.word	0xffefffff
 8003b48:	ff9fffff 	.word	0xff9fffff
 8003b4c:	fff7ffff 	.word	0xfff7ffff

08003b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b5e:	f7fd ff77 	bl	8001a50 <HAL_GetTick>
 8003b62:	0003      	movs	r3, r0
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d10d      	bne.n	8003b90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	0399      	lsls	r1, r3, #14
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <UART_CheckIdleState+0x88>)
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	0013      	movs	r3, r2
 8003b82:	2200      	movs	r2, #0
 8003b84:	f000 f82a 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e01f      	b.n	8003bd0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2204      	movs	r2, #4
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d10d      	bne.n	8003bba <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	03d9      	lsls	r1, r3, #15
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <UART_CheckIdleState+0x88>)
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	0013      	movs	r3, r2
 8003bac:	2200      	movs	r2, #0
 8003bae:	f000 f815 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003bb2:	1e03      	subs	r3, r0, #0
 8003bb4:	d001      	beq.n	8003bba <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e00a      	b.n	8003bd0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2270      	movs	r2, #112	; 0x70
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b004      	add	sp, #16
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	01ffffff 	.word	0x01ffffff

08003bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	1dfb      	adds	r3, r7, #7
 8003bea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bec:	e05d      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	d05a      	beq.n	8003caa <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fd ff2c 	bl	8001a50 <HAL_GetTick>
 8003bf8:	0002      	movs	r2, r0
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11b      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	492f      	ldr	r1, [pc, #188]	; (8003cd4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003c16:	400a      	ands	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	438a      	bics	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2270      	movs	r2, #112	; 0x70
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e043      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2204      	movs	r2, #4
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d02d      	beq.n	8003caa <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	401a      	ands	r2, r3
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d123      	bne.n	8003caa <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4917      	ldr	r1, [pc, #92]	; (8003cd4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2101      	movs	r1, #1
 8003c88:	438a      	bics	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2270      	movs	r2, #112	; 0x70
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e00f      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	425a      	negs	r2, r3
 8003cba:	4153      	adcs	r3, r2
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	1dfb      	adds	r3, r7, #7
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d092      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b004      	add	sp, #16
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	fffffe5f 	.word	0xfffffe5f

08003cd8 <__libc_init_array>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	2600      	movs	r6, #0
 8003cdc:	4d0c      	ldr	r5, [pc, #48]	; (8003d10 <__libc_init_array+0x38>)
 8003cde:	4c0d      	ldr	r4, [pc, #52]	; (8003d14 <__libc_init_array+0x3c>)
 8003ce0:	1b64      	subs	r4, r4, r5
 8003ce2:	10a4      	asrs	r4, r4, #2
 8003ce4:	42a6      	cmp	r6, r4
 8003ce6:	d109      	bne.n	8003cfc <__libc_init_array+0x24>
 8003ce8:	2600      	movs	r6, #0
 8003cea:	f000 f821 	bl	8003d30 <_init>
 8003cee:	4d0a      	ldr	r5, [pc, #40]	; (8003d18 <__libc_init_array+0x40>)
 8003cf0:	4c0a      	ldr	r4, [pc, #40]	; (8003d1c <__libc_init_array+0x44>)
 8003cf2:	1b64      	subs	r4, r4, r5
 8003cf4:	10a4      	asrs	r4, r4, #2
 8003cf6:	42a6      	cmp	r6, r4
 8003cf8:	d105      	bne.n	8003d06 <__libc_init_array+0x2e>
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	00b3      	lsls	r3, r6, #2
 8003cfe:	58eb      	ldr	r3, [r5, r3]
 8003d00:	4798      	blx	r3
 8003d02:	3601      	adds	r6, #1
 8003d04:	e7ee      	b.n	8003ce4 <__libc_init_array+0xc>
 8003d06:	00b3      	lsls	r3, r6, #2
 8003d08:	58eb      	ldr	r3, [r5, r3]
 8003d0a:	4798      	blx	r3
 8003d0c:	3601      	adds	r6, #1
 8003d0e:	e7f2      	b.n	8003cf6 <__libc_init_array+0x1e>
 8003d10:	08003dc8 	.word	0x08003dc8
 8003d14:	08003dc8 	.word	0x08003dc8
 8003d18:	08003dc8 	.word	0x08003dc8
 8003d1c:	08003dcc 	.word	0x08003dcc

08003d20 <memset>:
 8003d20:	0003      	movs	r3, r0
 8003d22:	1812      	adds	r2, r2, r0
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d100      	bne.n	8003d2a <memset+0xa>
 8003d28:	4770      	bx	lr
 8003d2a:	7019      	strb	r1, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	e7f9      	b.n	8003d24 <memset+0x4>

08003d30 <_init>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr

08003d3c <_fini>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr
